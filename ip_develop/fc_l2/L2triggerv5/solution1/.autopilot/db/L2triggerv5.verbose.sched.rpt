

================================================================
== Vivado HLS Report for 'L2triggerv5'
================================================================
* Date:           Thu Apr 20 15:51:02 2017

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        L2triggerv5
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z030ffg676-2


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|      5.16|        0.62|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----------+-----+-----------+---------+
    |     Latency     |     Interval    | Pipeline|
    | min |    max    | min |    max    |   Type  |
    +-----+-----------+-----+-----------+---------+
    |  276|  196209072|  277|  196209073|   none  |
    +-----+-----------+-----+-----------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-----------+-------------+-----------+-----------+-----------+----------+
        |                 |     Latency     |  Iteration  |  Initiation Interval  |    Trip   |          |
        |    Loop Name    | min |    max    |   Latency   |  achieved |   target  |   Count   | Pipelined|
        +-----------------+-----+-----------+-------------+-----------+-----------+-----------+----------+
        |- Loop 1         |    0|      32767|            1|          -|          -| 0 ~ 32767 |    no    |
        |- Loop 2         |   16|     262152|  2 ~ 32769  |          -|          -|          8|    no    |
        | + Loop 2.1      |    0|      32767|            1|          -|          -| 0 ~ 32767 |    no    |
        |- Loop 3         |  256|  192932352| 2 ~ 1507284 |          -|          -|        128|    no    |
        | + Loop 3.1      |    0|    1507282|   45 ~ 46   |          -|          -| 0 ~ 32767 |    no    |
        |  ++ Loop 3.1.1  |   35|         35|            5|          -|          -|          7|    no    |
        |- Loop 4         |    0|    2981797|           91|          -|          -| 0 ~ 32767 |    no    |
        +-----------------+-----+-----------+-------------+-----------+-----------+-----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 111
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (exitcond9)
	2  / (!exitcond9)
3 --> 
	5  / (exitcond1)
	4  / (!exitcond1)
4 --> 
	3  / (exitcond8)
	4  / (!exitcond8)
5 --> 
	6  / (!exitcond)
	21  / (exitcond)
6 --> 
	5  / (exitcond7)
	7  / (!exitcond7)
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / (!tmp_37)
	15  / (tmp_37)
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	10  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / (!tmp_34)
	19  / (tmp_34)
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	6  / true
21 --> 
	22  / (!exitcond6)
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	43  / true
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	21  / true
* FSM state operations: 

 <State 1>: 1.31ns
ST_1: stg_112 [1/1] 0.00ns
arrayctor.loop1.preheader:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %in_stream_V_data_V), !map !102

ST_1: stg_113 [1/1] 0.00ns
arrayctor.loop1.preheader:1  call void (...)* @_ssdm_op_SpecBitsMap(i4* %in_stream_V_keep_V), !map !108

ST_1: stg_114 [1/1] 0.00ns
arrayctor.loop1.preheader:2  call void (...)* @_ssdm_op_SpecBitsMap(i4* %in_stream_V_strb_V), !map !112

ST_1: stg_115 [1/1] 0.00ns
arrayctor.loop1.preheader:3  call void (...)* @_ssdm_op_SpecBitsMap(i2* %in_stream_V_user_V), !map !116

ST_1: stg_116 [1/1] 0.00ns
arrayctor.loop1.preheader:4  call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_stream_V_last_V), !map !120

ST_1: stg_117 [1/1] 0.00ns
arrayctor.loop1.preheader:5  call void (...)* @_ssdm_op_SpecBitsMap(i5* %in_stream_V_id_V), !map !124

ST_1: stg_118 [1/1] 0.00ns
arrayctor.loop1.preheader:6  call void (...)* @_ssdm_op_SpecBitsMap(i6* %in_stream_V_dest_V), !map !128

ST_1: stg_119 [1/1] 0.00ns
arrayctor.loop1.preheader:7  call void (...)* @_ssdm_op_SpecBitsMap(i64* %out_stream_V_data_V), !map !132

ST_1: stg_120 [1/1] 0.00ns
arrayctor.loop1.preheader:8  call void (...)* @_ssdm_op_SpecBitsMap(i8* %out_stream_V_keep_V), !map !136

ST_1: stg_121 [1/1] 0.00ns
arrayctor.loop1.preheader:9  call void (...)* @_ssdm_op_SpecBitsMap(i8* %out_stream_V_strb_V), !map !140

ST_1: stg_122 [1/1] 0.00ns
arrayctor.loop1.preheader:10  call void (...)* @_ssdm_op_SpecBitsMap(i2* %out_stream_V_user_V), !map !144

ST_1: stg_123 [1/1] 0.00ns
arrayctor.loop1.preheader:11  call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_stream_V_last_V), !map !148

ST_1: stg_124 [1/1] 0.00ns
arrayctor.loop1.preheader:12  call void (...)* @_ssdm_op_SpecBitsMap(i5* %out_stream_V_id_V), !map !152

ST_1: stg_125 [1/1] 0.00ns
arrayctor.loop1.preheader:13  call void (...)* @_ssdm_op_SpecBitsMap(i6* %out_stream_V_dest_V), !map !156

ST_1: stg_126 [1/1] 0.00ns
arrayctor.loop1.preheader:14  call void (...)* @_ssdm_op_SpecBitsMap(i16 %n_pixels_in_bus), !map !160

ST_1: stg_127 [1/1] 0.00ns
arrayctor.loop1.preheader:15  call void (...)* @_ssdm_op_SpecBitsMap(i32* %trig_data), !map !166

ST_1: stg_128 [1/1] 0.00ns
arrayctor.loop1.preheader:16  call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @L2triggerv5_str) nounwind

ST_1: n_pixels_in_bus_read [1/1] 1.00ns
arrayctor.loop1.preheader:17  %n_pixels_in_bus_read = call i16 @_ssdm_op_Read.s_axilite.i16(i16 %n_pixels_in_bus)

ST_1: sum_overP1 [1/1] 0.00ns
arrayctor.loop1.preheader:18  %sum_overP1 = alloca [1152 x i32], align 16

ST_1: sum_overP2 [1/1] 0.00ns
arrayctor.loop1.preheader:19  %sum_overP2 = alloca [1152 x i32], align 16

ST_1: sum_pix1 [1/1] 0.00ns
arrayctor.loop1.preheader:20  %sum_pix1 = alloca [1152 x i32], align 16

ST_1: data_shift1 [1/1] 0.00ns
arrayctor.loop1.preheader:21  %data_shift1 = alloca [9216 x i17], align 4

ST_1: thresh1 [1/1] 0.00ns
arrayctor.loop1.preheader:22  %thresh1 = alloca [1152 x i32], align 16

ST_1: sum_pix2 [1/1] 0.00ns
arrayctor.loop1.preheader:23  %sum_pix2 = alloca [1152 x i32], align 16

ST_1: data_shift2 [1/1] 0.00ns
arrayctor.loop1.preheader:24  %data_shift2 = alloca [9216 x i17], align 4

ST_1: thresh2 [1/1] 0.00ns
arrayctor.loop1.preheader:25  %thresh2 = alloca [1152 x i32], align 16

ST_1: stg_138 [1/1] 0.00ns
arrayctor.loop1.preheader:26  call void (...)* @_ssdm_op_SpecInterface(i32* %in_stream_V_data_V, i4* %in_stream_V_keep_V, i4* %in_stream_V_strb_V, i2* %in_stream_V_user_V, i1* %in_stream_V_last_V, i5* %in_stream_V_id_V, i6* %in_stream_V_dest_V, [5 x i8]* @p_str1804, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805) nounwind

ST_1: stg_139 [1/1] 0.00ns
arrayctor.loop1.preheader:27  call void (...)* @_ssdm_op_SpecInterface(i32* %trig_data, [8 x i8]* @p_str1806, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805) nounwind

ST_1: stg_140 [1/1] 0.00ns
arrayctor.loop1.preheader:28  call void (...)* @_ssdm_op_SpecInterface(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i2* %out_stream_V_user_V, i1* %out_stream_V_last_V, i5* %out_stream_V_id_V, i6* %out_stream_V_dest_V, [5 x i8]* @p_str1804, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805) nounwind

ST_1: stg_141 [1/1] 0.00ns
arrayctor.loop1.preheader:29  call void (...)* @_ssdm_op_SpecInterface(i16 %n_pixels_in_bus, [10 x i8]* @p_str1807, i32 0, i32 0, i32 0, i32 0, [9 x i8]* @p_str1808, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805) nounwind

ST_1: stg_142 [1/1] 0.00ns
arrayctor.loop1.preheader:30  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str1807, i32 0, i32 0, i32 0, i32 0, [9 x i8]* @p_str1808, [1 x i8]* @p_str1805, [1 x i8]* @p_str1805, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1805) nounwind

ST_1: stg_143 [1/1] 0.00ns
arrayctor.loop1.preheader:31  call void @_ssdm_op_Write.ap_ovld.volatile.i32P(i32* %trig_data, i32 0)

ST_1: tmp_s [1/1] 0.00ns
arrayctor.loop1.preheader:32  %tmp_s = call i15 @_ssdm_op_PartSelect.i15.i16.i32.i32(i16 %n_pixels_in_bus_read, i32 1, i32 15)

ST_1: tmp [1/1] 0.00ns
arrayctor.loop1.preheader:33  %tmp = zext i15 %tmp_s to i16

ST_1: stg_146 [1/1] 1.31ns
arrayctor.loop1.preheader:34  br label %0


 <State 2>: 3.16ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i15 [ 0, %arrayctor.loop1.preheader ], [ %i_4, %1 ]

ST_2: empty [1/1] 0.00ns
:1  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 32767, i64 0)

ST_2: exitcond9 [1/1] 1.85ns
:2  %exitcond9 = icmp eq i15 %i, %tmp_s

ST_2: i_4 [1/1] 1.60ns
:3  %i_4 = add i15 %i, 1

ST_2: stg_151 [1/1] 1.31ns
:4  br i1 %exitcond9, label %.preheader93, label %1

ST_2: tmp_2 [1/1] 0.00ns
:0  %tmp_2 = zext i15 %i to i64

ST_2: sum_pix1_addr [1/1] 0.00ns
:1  %sum_pix1_addr = getelementptr inbounds [1152 x i32]* %sum_pix1, i64 0, i64 %tmp_2

ST_2: stg_154 [1/1] 2.38ns
:2  store i32 0, i32* %sum_pix1_addr, align 4

ST_2: sum_pix2_addr [1/1] 0.00ns
:3  %sum_pix2_addr = getelementptr inbounds [1152 x i32]* %sum_pix2, i64 0, i64 %tmp_2

ST_2: stg_156 [1/1] 2.38ns
:4  store i32 0, i32* %sum_pix2_addr, align 4

ST_2: thresh1_addr [1/1] 0.00ns
:5  %thresh1_addr = getelementptr inbounds [1152 x i32]* %thresh1, i64 0, i64 %tmp_2

ST_2: stg_158 [1/1] 2.38ns
:6  store i32 255, i32* %thresh1_addr, align 4

ST_2: thresh2_addr [1/1] 0.00ns
:7  %thresh2_addr = getelementptr inbounds [1152 x i32]* %thresh2, i64 0, i64 %tmp_2

ST_2: stg_160 [1/1] 2.38ns
:8  store i32 255, i32* %thresh2_addr, align 4

ST_2: stg_161 [1/1] 0.00ns
:9  br label %0


 <State 3>: 2.71ns
ST_3: kk [1/1] 0.00ns
.preheader93:0  %kk = phi i4 [ 0, %0 ], [ %kk_2, %.preheader92 ]

ST_3: exitcond1 [1/1] 1.40ns
.preheader93:1  %exitcond1 = icmp eq i4 %kk, -8

ST_3: empty_46 [1/1] 0.00ns
.preheader93:2  %empty_46 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_3: kk_2 [1/1] 0.70ns
.preheader93:3  %kk_2 = add i4 %kk, 1

ST_3: stg_166 [1/1] 1.31ns
.preheader93:4  br i1 %exitcond1, label %.preheader91, label %.preheader92.preheader

ST_3: tmp_3 [1/1] 0.00ns
.preheader92.preheader:0  %tmp_3 = call i14 @_ssdm_op_BitConcatenate.i14.i4.i10(i4 %kk, i10 0)

ST_3: p_shl_cast [1/1] 0.00ns
.preheader92.preheader:1  %p_shl_cast = zext i14 %tmp_3 to i15

ST_3: tmp_9 [1/1] 0.00ns
.preheader92.preheader:2  %tmp_9 = call i11 @_ssdm_op_BitConcatenate.i11.i4.i7(i4 %kk, i7 0)

ST_3: p_shl1_cast [1/1] 0.00ns
.preheader92.preheader:3  %p_shl1_cast = zext i11 %tmp_9 to i15

ST_3: tmp_1 [1/1] 1.60ns
.preheader92.preheader:4  %tmp_1 = add i15 %p_shl1_cast, %p_shl_cast

ST_3: stg_172 [1/1] 1.31ns
.preheader92.preheader:5  br label %.preheader92


 <State 4>: 3.98ns
ST_4: i_1 [1/1] 0.00ns
.preheader92:0  %i_1 = phi i15 [ %i_5, %2 ], [ 0, %.preheader92.preheader ]

ST_4: empty_47 [1/1] 0.00ns
.preheader92:1  %empty_47 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 32767, i64 0)

ST_4: exitcond8 [1/1] 1.85ns
.preheader92:2  %exitcond8 = icmp eq i15 %i_1, %tmp_s

ST_4: i_5 [1/1] 1.60ns
.preheader92:3  %i_5 = add i15 %i_1, 1

ST_4: stg_177 [1/1] 0.00ns
.preheader92:4  br i1 %exitcond8, label %.preheader93, label %2

ST_4: tmp_12 [1/1] 1.60ns
:0  %tmp_12 = add i15 %tmp_1, %i_1

ST_4: tmp_17_cast [1/1] 0.00ns
:1  %tmp_17_cast = zext i15 %tmp_12 to i64

ST_4: data_shift1_addr_1 [1/1] 0.00ns
:2  %data_shift1_addr_1 = getelementptr [9216 x i17]* %data_shift1, i64 0, i64 %tmp_17_cast

ST_4: data_shift2_addr_1 [1/1] 0.00ns
:3  %data_shift2_addr_1 = getelementptr [9216 x i17]* %data_shift2, i64 0, i64 %tmp_17_cast

ST_4: stg_182 [1/1] 2.38ns
:4  store i17 0, i17* %data_shift1_addr_1, align 4

ST_4: stg_183 [1/1] 2.38ns
:5  store i17 0, i17* %data_shift2_addr_1, align 4

ST_4: stg_184 [1/1] 0.00ns
:6  br label %.preheader92


 <State 5>: 2.94ns
ST_5: k [1/1] 0.00ns
.preheader91:0  %k = phi i8 [ 0, %.preheader93 ], [ %k_1, %.preheader90 ]

ST_5: exitcond [1/1] 1.63ns
.preheader91:1  %exitcond = icmp eq i8 %k, -128

ST_5: empty_48 [1/1] 0.00ns
.preheader91:2  %empty_48 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)

ST_5: k_1 [1/1] 1.40ns
.preheader91:3  %k_1 = add i8 %k, 1

ST_5: stg_189 [1/1] 1.31ns
.preheader91:4  br i1 %exitcond, label %.preheader.preheader, label %.preheader90

ST_5: tmp_4 [1/1] 1.60ns
.preheader.preheader:0  %tmp_4 = add i16 %tmp, -1

ST_5: stg_191 [1/1] 1.31ns
.preheader.preheader:1  br label %.preheader


 <State 6>: 2.38ns
ST_6: i_2 [1/1] 0.00ns
.preheader90:0  %i_2 = phi i15 [ %i_7, %._crit_edge95 ], [ 0, %.preheader91 ]

ST_6: empty_49 [1/1] 0.00ns
.preheader90:1  %empty_49 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 32767, i64 0)

ST_6: exitcond7 [1/1] 1.85ns
.preheader90:2  %exitcond7 = icmp eq i15 %i_2, %tmp_s

ST_6: i_7 [1/1] 1.60ns
.preheader90:3  %i_7 = add i15 %i_2, 1

ST_6: stg_196 [1/1] 0.00ns
.preheader90:4  br i1 %exitcond7, label %.preheader91, label %_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit

ST_6: tmp_8 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:0  %tmp_8 = zext i15 %i_2 to i64

ST_6: sum_pix1_addr_2 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:8  %sum_pix1_addr_2 = getelementptr inbounds [1152 x i32]* %sum_pix1, i64 0, i64 %tmp_8

ST_6: sum_pix1_load_1 [2/2] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:9  %sum_pix1_load_1 = load i32* %sum_pix1_addr_2, align 4

ST_6: sum_pix2_addr_2 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:13  %sum_pix2_addr_2 = getelementptr inbounds [1152 x i32]* %sum_pix2, i64 0, i64 %tmp_8

ST_6: sum_pix2_load_1 [2/2] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:14  %sum_pix2_load_1 = load i32* %sum_pix2_addr_2, align 4


 <State 7>: 2.38ns
ST_7: sum_pix1_load_1 [1/2] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:9  %sum_pix1_load_1 = load i32* %sum_pix1_addr_2, align 4

ST_7: sum_pix2_load_1 [1/2] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:14  %sum_pix2_load_1 = load i32* %sum_pix2_addr_2, align 4


 <State 8>: 2.00ns
ST_8: empty_50 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:3  %empty_50 = call { i32, i4, i4, i2, i1, i5, i6 } @_ssdm_op_Read.axis.volatile.i32P.i4P.i4P.i2P.i1P.i5P.i6P(i32* %in_stream_V_data_V, i4* %in_stream_V_keep_V, i4* %in_stream_V_strb_V, i2* %in_stream_V_user_V, i1* %in_stream_V_last_V, i5* %in_stream_V_id_V, i6* %in_stream_V_dest_V)

ST_8: tmp_data_V_1 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:4  %tmp_data_V_1 = extractvalue { i32, i4, i4, i2, i1, i5, i6 } %empty_50, 0

ST_8: tmp_5 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:5  %tmp_5 = trunc i32 %tmp_data_V_1 to i16

ST_8: phitmp [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:6  %phitmp = call i16 @_ssdm_op_PartSelect.i16.i32.i32.i32(i32 %tmp_data_V_1, i32 16, i32 31)

ST_8: tmp_6 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:7  %tmp_6 = sext i16 %tmp_5 to i32

ST_8: tmp_7 [1/1] 2.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:10  %tmp_7 = add i32 %sum_pix1_load_1, %tmp_6

ST_8: tmp_10 [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:12  %tmp_10 = sext i16 %phitmp to i32

ST_8: tmp_11 [1/1] 2.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:15  %tmp_11 = add i32 %sum_pix2_load_1, %tmp_10


 <State 9>: 2.38ns
ST_9: data_shift1_addr [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:1  %data_shift1_addr = getelementptr [9216 x i17]* %data_shift1, i64 0, i64 %tmp_8

ST_9: data_shift2_addr [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:2  %data_shift2_addr = getelementptr [9216 x i17]* %data_shift2, i64 0, i64 %tmp_8

ST_9: stg_214 [1/1] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:11  store i32 %tmp_7, i32* %sum_pix1_addr_2, align 4

ST_9: stg_215 [1/1] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:16  store i32 %tmp_11, i32* %sum_pix2_addr_2, align 4

ST_9: sum_overP1_addr [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:17  %sum_overP1_addr = getelementptr inbounds [1152 x i32]* %sum_overP1, i64 0, i64 %tmp_8

ST_9: stg_217 [1/1] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:18  store i32 0, i32* %sum_overP1_addr, align 4

ST_9: sum_overP2_addr [1/1] 0.00ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:19  %sum_overP2_addr = getelementptr inbounds [1152 x i32]* %sum_overP2, i64 0, i64 %tmp_8

ST_9: stg_219 [1/1] 2.38ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:20  store i32 0, i32* %sum_overP2_addr, align 4

ST_9: stg_220 [1/1] 1.31ns
_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit:21  br label %3


 <State 10>: 3.70ns
ST_10: kk_1 [1/1] 0.00ns
:0  %kk_1 = phi i4 [ 6, %_ZrsILi32ELb1EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit ], [ %kk_3, %4 ]

ST_10: tmp_37 [1/1] 0.00ns
:1  %tmp_37 = call i1 @_ssdm_op_BitSelect.i1.i4.i32(i4 %kk_1, i32 3)

ST_10: empty_51 [1/1] 0.00ns
:2  %empty_51 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 7, i64 7, i64 7)

ST_10: stg_224 [1/1] 0.00ns
:3  br i1 %tmp_37, label %5, label %4

ST_10: tmp_38 [1/1] 0.00ns
:0  %tmp_38 = call i14 @_ssdm_op_BitConcatenate.i14.i4.i10(i4 %kk_1, i10 0)

ST_10: p_shl4_cast [1/1] 0.00ns
:1  %p_shl4_cast = sext i14 %tmp_38 to i15

ST_10: tmp_39 [1/1] 0.00ns
:2  %tmp_39 = call i11 @_ssdm_op_BitConcatenate.i11.i4.i7(i4 %kk_1, i7 0)

ST_10: p_shl5_cast [1/1] 0.00ns
:3  %p_shl5_cast = sext i11 %tmp_39 to i15

ST_10: tmp_40 [1/1] 1.50ns
:4  %tmp_40 = add i15 %p_shl5_cast, %p_shl4_cast

ST_10: tmp_41 [1/1] 1.50ns
:5  %tmp_41 = add i15 %tmp_40, %i_2

ST_10: tmp_28 [1/1] 0.70ns
:11  %tmp_28 = add i4 %kk_1, 1

ST_10: tmp_42 [1/1] 0.00ns
:12  %tmp_42 = call i14 @_ssdm_op_BitConcatenate.i14.i4.i10(i4 %tmp_28, i10 0)

ST_10: p_shl2_cast [1/1] 0.00ns
:13  %p_shl2_cast = zext i14 %tmp_42 to i15

ST_10: tmp_43 [1/1] 0.00ns
:14  %tmp_43 = call i11 @_ssdm_op_BitConcatenate.i11.i4.i7(i4 %tmp_28, i7 0)

ST_10: p_shl3_cast [1/1] 0.00ns
:15  %p_shl3_cast = zext i11 %tmp_43 to i15

ST_10: tmp_44 [1/1] 1.50ns
:16  %tmp_44 = add i15 %p_shl3_cast, %p_shl2_cast

ST_10: tmp_45 [1/1] 1.50ns
:17  %tmp_45 = add i15 %tmp_44, %i_2

ST_10: kk_3 [1/1] 0.70ns
:31  %kk_3 = add i4 %kk_1, -1

ST_10: tmp_10_cast [1/1] 0.00ns
:0  %tmp_10_cast = sext i16 %tmp_5 to i17

ST_10: stg_240 [1/1] 2.38ns
:1  store i17 %tmp_10_cast, i17* %data_shift1_addr, align 4

ST_10: tmp_12_cast [1/1] 0.00ns
:2  %tmp_12_cast = sext i16 %phitmp to i17

ST_10: stg_242 [1/1] 2.38ns
:3  store i17 %tmp_12_cast, i17* %data_shift2_addr, align 4

ST_10: sum_overP1_load_1 [2/2] 2.38ns
:4  %sum_overP1_load_1 = load i32* %sum_overP1_addr, align 4

ST_10: sum_overP2_load_1 [2/2] 2.38ns
:7  %sum_overP2_load_1 = load i32* %sum_overP2_addr, align 4


 <State 11>: 2.38ns
ST_11: tmp_47_cast [1/1] 0.00ns
:6  %tmp_47_cast = zext i15 %tmp_41 to i64

ST_11: data_shift1_addr_2 [1/1] 0.00ns
:7  %data_shift1_addr_2 = getelementptr [9216 x i17]* %data_shift1, i64 0, i64 %tmp_47_cast

ST_11: data_shift2_addr_2 [1/1] 0.00ns
:8  %data_shift2_addr_2 = getelementptr [9216 x i17]* %data_shift2, i64 0, i64 %tmp_47_cast

ST_11: data_shift1_load [2/2] 2.38ns
:9  %data_shift1_load = load i17* %data_shift1_addr_2, align 4

ST_11: data_shift2_load [2/2] 2.38ns
:22  %data_shift2_load = load i17* %data_shift2_addr_2, align 4

ST_11: sum_overP1_load [2/2] 2.38ns
:25  %sum_overP1_load = load i32* %sum_overP1_addr, align 4

ST_11: sum_overP2_load [2/2] 2.38ns
:28  %sum_overP2_load = load i32* %sum_overP2_addr, align 4


 <State 12>: 2.38ns
ST_12: data_shift1_load [1/2] 2.38ns
:9  %data_shift1_load = load i17* %data_shift1_addr_2, align 4

ST_12: data_shift2_load [1/2] 2.38ns
:22  %data_shift2_load = load i17* %data_shift2_addr_2, align 4

ST_12: sum_overP1_load [1/2] 2.38ns
:25  %sum_overP1_load = load i32* %sum_overP1_addr, align 4

ST_12: sum_overP2_load [1/2] 2.38ns
:28  %sum_overP2_load = load i32* %sum_overP2_addr, align 4


 <State 13>: 2.38ns
ST_13: extLd [1/1] 0.00ns
:10  %extLd = sext i17 %data_shift1_load to i32

ST_13: tmp_51_cast [1/1] 0.00ns
:18  %tmp_51_cast = zext i15 %tmp_45 to i64

ST_13: data_shift1_addr_3 [1/1] 0.00ns
:19  %data_shift1_addr_3 = getelementptr [9216 x i17]* %data_shift1, i64 0, i64 %tmp_51_cast

ST_13: data_shift2_addr_3 [1/1] 0.00ns
:20  %data_shift2_addr_3 = getelementptr [9216 x i17]* %data_shift2, i64 0, i64 %tmp_51_cast

ST_13: stg_260 [1/1] 2.38ns
:21  store i17 %data_shift1_load, i17* %data_shift1_addr_3, align 4

ST_13: extLd1 [1/1] 0.00ns
:23  %extLd1 = sext i17 %data_shift2_load to i32

ST_13: stg_262 [1/1] 2.38ns
:24  store i17 %data_shift2_load, i17* %data_shift2_addr_3, align 4

ST_13: tmp_30 [1/1] 2.00ns
:26  %tmp_30 = add i32 %sum_overP1_load, %extLd

ST_13: tmp_31 [1/1] 2.00ns
:29  %tmp_31 = add i32 %sum_overP2_load, %extLd1


 <State 14>: 2.38ns
ST_14: stg_265 [1/1] 2.38ns
:27  store i32 %tmp_30, i32* %sum_overP1_addr, align 4

ST_14: stg_266 [1/1] 2.38ns
:30  store i32 %tmp_31, i32* %sum_overP2_addr, align 4

ST_14: stg_267 [1/1] 0.00ns
:32  br label %3


 <State 15>: 2.38ns
ST_15: sum_overP1_load_1 [1/2] 2.38ns
:4  %sum_overP1_load_1 = load i32* %sum_overP1_addr, align 4

ST_15: sum_overP2_load_1 [1/2] 2.38ns
:7  %sum_overP2_load_1 = load i32* %sum_overP2_addr, align 4

ST_15: thresh1_addr_2 [1/1] 0.00ns
:10  %thresh1_addr_2 = getelementptr inbounds [1152 x i32]* %thresh1, i64 0, i64 %tmp_8

ST_15: thresh1_load [2/2] 2.38ns
:11  %thresh1_load = load i32* %thresh1_addr_2, align 4


 <State 16>: 2.38ns
ST_16: tmp_32 [1/1] 2.00ns
:5  %tmp_32 = add i32 %tmp_6, %sum_overP1_load_1

ST_16: tmp_33 [1/1] 2.00ns
:8  %tmp_33 = add i32 %tmp_10, %sum_overP2_load_1

ST_16: thresh1_load [1/2] 2.38ns
:11  %thresh1_load = load i32* %thresh1_addr_2, align 4


 <State 17>: 2.38ns
ST_17: stg_275 [1/1] 2.38ns
:6  store i32 %tmp_32, i32* %sum_overP1_addr, align 4

ST_17: stg_276 [1/1] 2.38ns
:9  store i32 %tmp_33, i32* %sum_overP2_addr, align 4

ST_17: tmp_34 [1/1] 2.12ns
:12  %tmp_34 = icmp ugt i32 %tmp_32, %thresh1_load

ST_17: stg_278 [1/1] 0.00ns
:13  br i1 %tmp_34, label %._crit_edge, label %6

ST_17: thresh2_addr_2 [1/1] 0.00ns
:0  %thresh2_addr_2 = getelementptr inbounds [1152 x i32]* %thresh2, i64 0, i64 %tmp_8

ST_17: thresh2_load [2/2] 2.38ns
:1  %thresh2_load = load i32* %thresh2_addr_2, align 4


 <State 18>: 2.38ns
ST_18: thresh2_load [1/2] 2.38ns
:1  %thresh2_load = load i32* %thresh2_addr_2, align 4


 <State 19>: 2.12ns
ST_19: tmp_35 [1/1] 2.12ns
:2  %tmp_35 = icmp ugt i32 %tmp_33, %thresh2_load

ST_19: stg_283 [1/1] 0.00ns
:3  br i1 %tmp_35, label %._crit_edge, label %._crit_edge95

ST_19: stg_284 [1/1] 0.00ns
._crit_edge:0  call void @_ssdm_op_Write.ap_ovld.volatile.i32P(i32* %trig_data, i32 1)


 <State 20>: 0.00ns
ST_20: stg_285 [1/1] 0.00ns
._crit_edge:1  call void @_ssdm_op_Write.ap_ovld.volatile.i32P(i32* %trig_data, i32 0)

ST_20: stg_286 [1/1] 0.00ns
._crit_edge:2  br label %._crit_edge95

ST_20: stg_287 [1/1] 0.00ns
._crit_edge95:0  br label %.preheader90


 <State 21>: 2.38ns
ST_21: i_3 [1/1] 0.00ns
.preheader:0  %i_3 = phi i15 [ %i_6, %_ifconv ], [ 0, %.preheader.preheader ]

ST_21: i_3_cast [1/1] 0.00ns
.preheader:1  %i_3_cast = zext i15 %i_3 to i16

ST_21: empty_52 [1/1] 0.00ns
.preheader:2  %empty_52 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 32767, i64 0)

ST_21: exitcond6 [1/1] 1.85ns
.preheader:3  %exitcond6 = icmp eq i15 %i_3, %tmp_s

ST_21: i_6 [1/1] 1.60ns
.preheader:4  %i_6 = add i15 %i_3, 1

ST_21: stg_293 [1/1] 0.00ns
.preheader:5  br i1 %exitcond6, label %7, label %_ifconv

ST_21: tmp_13 [1/1] 0.00ns
_ifconv:0  %tmp_13 = zext i15 %i_3 to i64

ST_21: sum_pix2_addr_1 [1/1] 0.00ns
_ifconv:1  %sum_pix2_addr_1 = getelementptr inbounds [1152 x i32]* %sum_pix2, i64 0, i64 %tmp_13

ST_21: sum_pix2_load [2/2] 2.38ns
_ifconv:2  %sum_pix2_load = load i32* %sum_pix2_addr_1, align 4

ST_21: sum_pix1_addr_1 [1/1] 0.00ns
_ifconv:3  %sum_pix1_addr_1 = getelementptr inbounds [1152 x i32]* %sum_pix1, i64 0, i64 %tmp_13

ST_21: sum_pix1_load [2/2] 2.38ns
_ifconv:4  %sum_pix1_load = load i32* %sum_pix1_addr_1, align 4

ST_21: l3_data_last_V [1/1] 1.88ns
_ifconv:6  %l3_data_last_V = icmp eq i16 %i_3_cast, %tmp_4

ST_21: stg_300 [1/1] 0.00ns
:0  ret void


 <State 22>: 2.38ns
ST_22: sum_pix2_load [1/2] 2.38ns
_ifconv:2  %sum_pix2_load = load i32* %sum_pix2_addr_1, align 4

ST_22: sum_pix1_load [1/2] 2.38ns
_ifconv:4  %sum_pix1_load = load i32* %sum_pix1_addr_1, align 4

ST_22: tmp_data_V [1/1] 0.00ns
_ifconv:5  %tmp_data_V = call i64 @_ssdm_op_BitConcatenate.i64.i32.i32(i32 %sum_pix2_load, i32 %sum_pix1_load)

ST_22: stg_304 [1/1] 0.00ns
_ifconv:7  call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i8P.i2P.i1P.i5P.i6P(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i2* %out_stream_V_user_V, i1* %out_stream_V_last_V, i5* %out_stream_V_id_V, i6* %out_stream_V_dest_V, i64 %tmp_data_V, i8 -1, i8 -1, i2 undef, i1 %l3_data_last_V, i5 undef, i6 undef)

ST_22: tmp_14 [1/1] 0.00ns
_ifconv:8  %tmp_14 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %sum_pix1_load, i32 7, i32 31)

ST_22: tmp_15 [1/1] 0.00ns
_ifconv:10  %tmp_15 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %sum_pix2_load, i32 7, i32 31)


 <State 23>: 5.16ns
ST_23: sum_pixP1 [1/1] 0.00ns
_ifconv:9  %sum_pixP1 = call i28 @_ssdm_op_BitConcatenate.i28.i25.i3(i25 %tmp_14, i3 0)

ST_23: sum_pixP2 [1/1] 0.00ns
_ifconv:11  %sum_pixP2 = call i28 @_ssdm_op_BitConcatenate.i28.i25.i3(i25 %tmp_15, i3 0)

ST_23: tmp_16 [1/1] 0.00ns
_ifconv:12  %tmp_16 = zext i28 %sum_pixP1 to i32

ST_23: tmp_17 [8/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_23: tmp_26 [1/1] 0.00ns
_ifconv:39  %tmp_26 = zext i28 %sum_pixP2 to i32

ST_23: tmp_23 [8/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 24>: 5.16ns
ST_24: tmp_17 [7/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_24: tmp_23 [7/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 25>: 5.16ns
ST_25: tmp_17 [6/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_25: tmp_23 [6/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 26>: 5.16ns
ST_26: tmp_17 [5/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_26: tmp_23 [5/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 27>: 5.16ns
ST_27: tmp_17 [4/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_27: tmp_23 [4/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 28>: 5.16ns
ST_28: tmp_17 [3/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_28: tmp_23 [3/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 29>: 5.16ns
ST_29: tmp_17 [2/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_29: tmp_23 [2/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 30>: 5.16ns
ST_30: tmp_17 [1/8] 5.16ns
_ifconv:13  %tmp_17 = uitofp i32 %tmp_16 to double

ST_30: tmp_23 [1/8] 5.16ns
_ifconv:40  %tmp_23 = uitofp i32 %tmp_26 to double


 <State 31>: 4.32ns
ST_31: tmp_18 [59/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_31: tmp_24 [59/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 32>: 4.32ns
ST_32: tmp_18 [58/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_32: tmp_24 [58/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 33>: 4.32ns
ST_33: tmp_18 [57/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_33: tmp_24 [57/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 34>: 4.32ns
ST_34: tmp_18 [56/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_34: tmp_24 [56/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 35>: 4.32ns
ST_35: tmp_18 [55/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_35: tmp_24 [55/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 36>: 4.32ns
ST_36: tmp_18 [54/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_36: tmp_24 [54/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 37>: 4.32ns
ST_37: tmp_18 [53/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_37: tmp_24 [53/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 38>: 4.32ns
ST_38: tmp_18 [52/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_38: tmp_24 [52/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 39>: 4.32ns
ST_39: tmp_18 [51/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_39: tmp_24 [51/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 40>: 4.32ns
ST_40: tmp_18 [50/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_40: tmp_24 [50/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 41>: 4.32ns
ST_41: tmp_18 [49/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_41: tmp_24 [49/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 42>: 4.32ns
ST_42: tmp_18 [48/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_42: tmp_24 [48/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 43>: 4.32ns
ST_43: tmp_18 [47/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_43: tmp_24 [47/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 44>: 4.32ns
ST_44: tmp_18 [46/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_44: tmp_24 [46/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 45>: 4.32ns
ST_45: tmp_18 [45/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_45: tmp_24 [45/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 46>: 4.32ns
ST_46: tmp_18 [44/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_46: tmp_24 [44/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 47>: 4.32ns
ST_47: tmp_18 [43/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_47: tmp_24 [43/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 48>: 4.32ns
ST_48: tmp_18 [42/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_48: tmp_24 [42/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 49>: 4.32ns
ST_49: tmp_18 [41/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_49: tmp_24 [41/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 50>: 4.32ns
ST_50: tmp_18 [40/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_50: tmp_24 [40/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 51>: 4.32ns
ST_51: tmp_18 [39/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_51: tmp_24 [39/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 52>: 4.32ns
ST_52: tmp_18 [38/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_52: tmp_24 [38/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 53>: 4.32ns
ST_53: tmp_18 [37/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_53: tmp_24 [37/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 54>: 4.32ns
ST_54: tmp_18 [36/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_54: tmp_24 [36/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 55>: 4.32ns
ST_55: tmp_18 [35/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_55: tmp_24 [35/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 56>: 4.32ns
ST_56: tmp_18 [34/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_56: tmp_24 [34/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 57>: 4.32ns
ST_57: tmp_18 [33/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_57: tmp_24 [33/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 58>: 4.32ns
ST_58: tmp_18 [32/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_58: tmp_24 [32/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 59>: 4.32ns
ST_59: tmp_18 [31/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_59: tmp_24 [31/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 60>: 4.32ns
ST_60: tmp_18 [30/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_60: tmp_24 [30/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 61>: 4.32ns
ST_61: tmp_18 [29/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_61: tmp_24 [29/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 62>: 4.32ns
ST_62: tmp_18 [28/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_62: tmp_24 [28/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 63>: 4.32ns
ST_63: tmp_18 [27/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_63: tmp_24 [27/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 64>: 4.32ns
ST_64: tmp_18 [26/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_64: tmp_24 [26/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 65>: 4.32ns
ST_65: tmp_18 [25/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_65: tmp_24 [25/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 66>: 4.32ns
ST_66: tmp_18 [24/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_66: tmp_24 [24/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 67>: 4.32ns
ST_67: tmp_18 [23/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_67: tmp_24 [23/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 68>: 4.32ns
ST_68: tmp_18 [22/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_68: tmp_24 [22/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 69>: 4.32ns
ST_69: tmp_18 [21/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_69: tmp_24 [21/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 70>: 4.32ns
ST_70: tmp_18 [20/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_70: tmp_24 [20/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 71>: 4.32ns
ST_71: tmp_18 [19/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_71: tmp_24 [19/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 72>: 4.32ns
ST_72: tmp_18 [18/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_72: tmp_24 [18/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 73>: 4.32ns
ST_73: tmp_18 [17/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_73: tmp_24 [17/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 74>: 4.32ns
ST_74: tmp_18 [16/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_74: tmp_24 [16/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 75>: 4.32ns
ST_75: tmp_18 [15/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_75: tmp_24 [15/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 76>: 4.32ns
ST_76: tmp_18 [14/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_76: tmp_24 [14/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 77>: 4.32ns
ST_77: tmp_18 [13/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_77: tmp_24 [13/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 78>: 4.32ns
ST_78: tmp_18 [12/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_78: tmp_24 [12/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 79>: 4.32ns
ST_79: tmp_18 [11/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_79: tmp_24 [11/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 80>: 4.32ns
ST_80: tmp_18 [10/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_80: tmp_24 [10/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 81>: 4.32ns
ST_81: tmp_18 [9/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_81: tmp_24 [9/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 82>: 4.32ns
ST_82: tmp_18 [8/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_82: tmp_24 [8/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 83>: 4.32ns
ST_83: tmp_18 [7/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_83: tmp_24 [7/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 84>: 4.32ns
ST_84: tmp_18 [6/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_84: tmp_24 [6/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 85>: 4.32ns
ST_85: tmp_18 [5/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_85: tmp_24 [5/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 86>: 4.32ns
ST_86: tmp_18 [4/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_86: tmp_24 [4/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 87>: 4.32ns
ST_87: tmp_18 [3/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_87: tmp_24 [3/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 88>: 4.32ns
ST_88: tmp_18 [2/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_88: tmp_24 [2/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 89>: 4.32ns
ST_89: tmp_18 [1/59] 4.32ns
_ifconv:14  %tmp_18 = call double @llvm.sqrt.f64(double %tmp_17)

ST_89: tmp_24 [1/59] 4.32ns
_ifconv:41  %tmp_24 = call double @llvm.sqrt.f64(double %tmp_23)


 <State 90>: 3.65ns
ST_90: tmp_19 [10/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_90: tmp_25 [10/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 91>: 3.65ns
ST_91: tmp_19 [9/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_91: tmp_25 [9/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 92>: 3.65ns
ST_92: tmp_19 [8/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_92: tmp_25 [8/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 93>: 3.65ns
ST_93: tmp_19 [7/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_93: tmp_25 [7/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 94>: 3.65ns
ST_94: tmp_19 [6/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_94: tmp_25 [6/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 95>: 3.65ns
ST_95: tmp_19 [5/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_95: tmp_25 [5/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 96>: 3.65ns
ST_96: tmp_19 [4/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_96: tmp_25 [4/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 97>: 3.65ns
ST_97: tmp_19 [3/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_97: tmp_25 [3/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 98>: 3.65ns
ST_98: tmp_19 [2/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_98: tmp_25 [2/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 99>: 3.65ns
ST_99: tmp_19 [1/10] 3.65ns
_ifconv:15  %tmp_19 = fmul double %tmp_18, 6.000000e+00

ST_99: tmp_25 [1/10] 3.65ns
_ifconv:42  %tmp_25 = fmul double %tmp_24, 6.000000e+00


 <State 100>: 4.29ns
ST_100: x_assign [9/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_100: x_assign_1 [9/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 101>: 4.29ns
ST_101: x_assign [8/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_101: x_assign_1 [8/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 102>: 4.29ns
ST_102: x_assign [7/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_102: x_assign_1 [7/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 103>: 4.29ns
ST_103: x_assign [6/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_103: x_assign_1 [6/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 104>: 4.29ns
ST_104: x_assign [5/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_104: x_assign_1 [5/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 105>: 4.29ns
ST_105: x_assign [4/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_105: x_assign_1 [4/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 106>: 4.29ns
ST_106: x_assign [3/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_106: x_assign_1 [3/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 107>: 4.29ns
ST_107: x_assign [2/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_107: x_assign_1 [2/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25


 <State 108>: 4.29ns
ST_108: x_assign [1/9] 4.29ns
_ifconv:16  %x_assign = fadd double %tmp_17, %tmp_19

ST_108: p_Val2_s [1/1] 0.00ns
_ifconv:17  %p_Val2_s = bitcast double %x_assign to i64

ST_108: loc_V [1/1] 0.00ns
_ifconv:18  %loc_V = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_s, i32 52, i32 62) nounwind

ST_108: loc_V_1 [1/1] 0.00ns
_ifconv:19  %loc_V_1 = trunc i64 %p_Val2_s to i52

ST_108: x_assign_1 [1/9] 4.29ns
_ifconv:43  %x_assign_1 = fadd double %tmp_23, %tmp_25

ST_108: p_Val2_4 [1/1] 0.00ns
_ifconv:44  %p_Val2_4 = bitcast double %x_assign_1 to i64

ST_108: loc_V_2 [1/1] 0.00ns
_ifconv:45  %loc_V_2 = call i11 @_ssdm_op_PartSelect.i11.i64.i32.i32(i64 %p_Val2_4, i32 52, i32 62) nounwind

ST_108: loc_V_3 [1/1] 0.00ns
_ifconv:46  %loc_V_3 = trunc i64 %p_Val2_4 to i52


 <State 109>: 2.65ns
ST_109: tmp_i_i_i_cast2 [1/1] 0.00ns
_ifconv:22  %tmp_i_i_i_cast2 = zext i11 %loc_V to i12

ST_109: sh_assign [1/1] 1.50ns
_ifconv:23  %sh_assign = add i12 -1023, %tmp_i_i_i_cast2

ST_109: isNeg [1/1] 0.00ns
_ifconv:24  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %sh_assign, i32 11)

ST_109: tmp_2_i_i [1/1] 1.50ns
_ifconv:25  %tmp_2_i_i = sub i11 1023, %loc_V

ST_109: tmp_2_i_i_cast [1/1] 0.00ns
_ifconv:26  %tmp_2_i_i_cast = sext i11 %tmp_2_i_i to i12

ST_109: sh_assign_1 [1/1] 1.15ns
_ifconv:27  %sh_assign_1 = select i1 %isNeg, i12 %tmp_2_i_i_cast, i12 %sh_assign

ST_109: tmp_i_i_i6_cast1 [1/1] 0.00ns
_ifconv:49  %tmp_i_i_i6_cast1 = zext i11 %loc_V_2 to i12

ST_109: sh_assign_2 [1/1] 1.50ns
_ifconv:50  %sh_assign_2 = add i12 -1023, %tmp_i_i_i6_cast1

ST_109: isNeg_1 [1/1] 0.00ns
_ifconv:51  %isNeg_1 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %sh_assign_2, i32 11)

ST_109: tmp_2_i_i9 [1/1] 1.50ns
_ifconv:52  %tmp_2_i_i9 = sub i11 1023, %loc_V_2

ST_109: tmp_2_i_i9_cast [1/1] 0.00ns
_ifconv:53  %tmp_2_i_i9_cast = sext i11 %tmp_2_i_i9 to i12

ST_109: sh_assign_3 [1/1] 1.15ns
_ifconv:54  %sh_assign_3 = select i1 %isNeg_1, i12 %tmp_2_i_i9_cast, i12 %sh_assign_2


 <State 110>: 3.02ns
ST_110: p_Result_s [1/1] 0.00ns
_ifconv:20  %p_Result_s = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %loc_V_1) nounwind

ST_110: tmp_i_i [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:21  %tmp_i_i = zext i53 %p_Result_s to i136

ST_110: sh_assign_1_cast [1/1] 0.00ns
_ifconv:28  %sh_assign_1_cast = sext i12 %sh_assign_1 to i32

ST_110: tmp_4_i_i [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:29  %tmp_4_i_i = zext i32 %sh_assign_1_cast to i136

ST_110: tmp_4_i_i_cast [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:30  %tmp_4_i_i_cast = zext i32 %sh_assign_1_cast to i53

ST_110: tmp_5_i_i [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:31  %tmp_5_i_i = lshr i53 %p_Result_s, %tmp_4_i_i_cast

ST_110: tmp_7_i_i [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:32  %tmp_7_i_i = shl i136 %tmp_i_i, %tmp_4_i_i

ST_110: tmp_22 [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:33  %tmp_22 = call i1 @_ssdm_op_BitSelect.i1.i53.i32(i53 %tmp_5_i_i, i32 52)

ST_110: tmp_20 [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:34  %tmp_20 = zext i1 %tmp_22 to i32

ST_110: tmp_21 [1/1] 0.00ns (grouped into LUT with out node result_V)
_ifconv:35  %tmp_21 = call i32 @_ssdm_op_PartSelect.i32.i136.i32.i32(i136 %tmp_7_i_i, i32 52, i32 83)

ST_110: result_V [1/1] 3.02ns (out node of the LUT)
_ifconv:36  %result_V = select i1 %isNeg, i32 %tmp_20, i32 %tmp_21

ST_110: p_Result_4 [1/1] 0.00ns
_ifconv:47  %p_Result_4 = call i53 @_ssdm_op_BitConcatenate.i53.i1.i52(i1 true, i52 %loc_V_3) nounwind

ST_110: tmp_i_i5 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:48  %tmp_i_i5 = zext i53 %p_Result_4 to i136

ST_110: sh_assign_3_cast [1/1] 0.00ns
_ifconv:55  %sh_assign_3_cast = sext i12 %sh_assign_3 to i32

ST_110: tmp_4_i_i1 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:56  %tmp_4_i_i1 = zext i32 %sh_assign_3_cast to i136

ST_110: tmp_4_i_i1_cast [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:57  %tmp_4_i_i1_cast = zext i32 %sh_assign_3_cast to i53

ST_110: tmp_5_i_i1 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:58  %tmp_5_i_i1 = lshr i53 %p_Result_4, %tmp_4_i_i1_cast

ST_110: tmp_7_i_i1 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:59  %tmp_7_i_i1 = shl i136 %tmp_i_i5, %tmp_4_i_i1

ST_110: tmp_36 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:60  %tmp_36 = call i1 @_ssdm_op_BitSelect.i1.i53.i32(i53 %tmp_5_i_i1, i32 52)

ST_110: tmp_27 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:61  %tmp_27 = zext i1 %tmp_36 to i32

ST_110: tmp_29 [1/1] 0.00ns (grouped into LUT with out node result_V_1)
_ifconv:62  %tmp_29 = call i32 @_ssdm_op_PartSelect.i32.i136.i32.i32(i136 %tmp_7_i_i1, i32 52, i32 83)

ST_110: result_V_1 [1/1] 3.02ns (out node of the LUT)
_ifconv:63  %result_V_1 = select i1 %isNeg_1, i32 %tmp_27, i32 %tmp_29


 <State 111>: 2.38ns
ST_111: thresh1_addr_1 [1/1] 0.00ns
_ifconv:37  %thresh1_addr_1 = getelementptr inbounds [1152 x i32]* %thresh1, i64 0, i64 %tmp_13

ST_111: stg_524 [1/1] 2.38ns
_ifconv:38  store i32 %result_V, i32* %thresh1_addr_1, align 4

ST_111: thresh2_addr_1 [1/1] 0.00ns
_ifconv:64  %thresh2_addr_1 = getelementptr inbounds [1152 x i32]* %thresh2, i64 0, i64 %tmp_13

ST_111: stg_526 [1/1] 2.38ns
_ifconv:65  store i32 %result_V_1, i32* %thresh2_addr_1, align 4

ST_111: stg_527 [1/1] 0.00ns
_ifconv:66  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5ns, clock uncertainty: 0.625ns.

 <State 23>: 5.16ns
The critical path consists of the following:
	'bitconcatenate' operation ('sum_pixP1', L2triggerv5/cpp_code/L2triggerv5.cpp:105) (0 ns)
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 24>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 25>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 26>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 27>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 28>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 29>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)

 <State 30>: 5.16ns
The critical path consists of the following:
	'uitodp' operation ('tmp_17', L2triggerv5/cpp_code/L2triggerv5.cpp:107) (5.16 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
