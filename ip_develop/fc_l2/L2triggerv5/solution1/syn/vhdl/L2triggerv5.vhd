-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity L2triggerv5 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    trig_data : OUT STD_LOGIC_VECTOR (31 downto 0);
    trig_data_ap_vld : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of L2triggerv5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "L2triggerv5,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030ffg676-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.162000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=58,HLS_SYN_DSP=28,HLS_SYN_FF=11877,HLS_SYN_LUT=11652}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (110 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (110 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (110 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (110 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (110 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (110 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (110 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (110 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (110 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (110 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st110_fsm_109 : STD_LOGIC_VECTOR (110 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st111_fsm_110 : STD_LOGIC_VECTOR (110 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv64_4018000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal n_pixels_in_bus : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal sum_overP1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_215 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_222 : BOOLEAN;
    signal sum_overP2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_577_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_reg_1199 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_587_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1207 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_596_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_241 : BOOLEAN;
    signal kk_2_fu_616_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal kk_2_reg_1223 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_250 : BOOLEAN;
    signal tmp_1_fu_646_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_1228 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_657_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_265 : BOOLEAN;
    signal k_1_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_274 : BOOLEAN;
    signal tmp_4_fu_686_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1249 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_696_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_7_reg_1257 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_289 : BOOLEAN;
    signal tmp_8_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1262 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_pix1_addr_2_reg_1272 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix2_addr_2_reg_1277 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_load_1_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_307 : BOOLEAN;
    signal sum_pix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_load_1_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_712_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1292 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_fu_716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_reg_1297 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_shift1_addr_reg_1322 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_333 : BOOLEAN;
    signal data_shift2_addr_reg_1327 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_overP1_addr_reg_1332 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP2_addr_reg_1337 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_782_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_41_reg_1345 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_348 : BOOLEAN;
    signal tmp_37_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_824_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_reg_1350 : STD_LOGIC_VECTOR (14 downto 0);
    signal kk_3_fu_830_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal kk_3_reg_1355 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_364 : BOOLEAN;
    signal data_shift1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_shift1_load_reg_1370 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_shift2_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_shift2_load_reg_1376 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_379 : BOOLEAN;
    signal tmp_31_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_392 : BOOLEAN;
    signal tmp_33_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh1_load_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_405 : BOOLEAN;
    signal thresh2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh2_load_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_418 : BOOLEAN;
    signal tmp_35_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_427 : BOOLEAN;
    signal i_6_fu_899_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_6_reg_1435 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_438 : BOOLEAN;
    signal tmp_13_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1440 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l3_data_last_V_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l3_data_last_V_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1461 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_ioackin_out_stream_TREADY : STD_LOGIC;
    signal tmp_15_reg_1466 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_466 : BOOLEAN;
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1481 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_477 : BOOLEAN;
    signal grp_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1487 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1493 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st89_fsm_88 : STD_LOGIC;
    signal ap_sig_488 : BOOLEAN;
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1498 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_1503 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st99_fsm_98 : STD_LOGIC;
    signal ap_sig_499 : BOOLEAN;
    signal grp_fu_548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1508 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_reg_1513 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st108_fsm_107 : STD_LOGIC;
    signal ap_sig_510 : BOOLEAN;
    signal loc_V_1_fu_983_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1519 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_2_reg_1524 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_3_fu_1001_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_3_reg_1530 : STD_LOGIC_VECTOR (51 downto 0);
    signal isNeg_fu_1014_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1535 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st109_fsm_108 : STD_LOGIC;
    signal ap_sig_525 : BOOLEAN;
    signal sh_assign_1_fu_1031_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_reg_1540 : STD_LOGIC_VECTOR (11 downto 0);
    signal isNeg_1_fu_1048_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_1065_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_reg_1550 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_V_fu_1129_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st110_fsm_109 : STD_LOGIC;
    signal ap_sig_540 : BOOLEAN;
    signal result_V_1_fu_1192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP1_ce0 : STD_LOGIC;
    signal sum_overP1_we0 : STD_LOGIC;
    signal sum_overP1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP2_ce0 : STD_LOGIC;
    signal sum_overP2_we0 : STD_LOGIC;
    signal sum_overP2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix1_ce0 : STD_LOGIC;
    signal sum_pix1_we0 : STD_LOGIC;
    signal sum_pix1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_shift1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_shift1_ce0 : STD_LOGIC;
    signal data_shift1_we0 : STD_LOGIC;
    signal data_shift1_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal thresh1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal thresh1_ce0 : STD_LOGIC;
    signal thresh1_we0 : STD_LOGIC;
    signal thresh1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix2_ce0 : STD_LOGIC;
    signal sum_pix2_we0 : STD_LOGIC;
    signal sum_pix2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_shift2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_shift2_ce0 : STD_LOGIC;
    signal data_shift2_we0 : STD_LOGIC;
    signal data_shift2_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal thresh2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal thresh2_ce0 : STD_LOGIC;
    signal thresh2_we0 : STD_LOGIC;
    signal thresh2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_457 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond9_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kk_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_479 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_501 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_642 : BOOLEAN;
    signal kk_1_reg_513 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_653 : BOOLEAN;
    signal i_3_reg_524 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st111_fsm_110 : STD_LOGIC;
    signal ap_sig_662 : BOOLEAN;
    signal tmp_2_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_out_stream_TREADY : STD_LOGIC := '0';
    signal tmp_10_cast_fu_836_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_cast_fu_840_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st100_fsm_99 : STD_LOGIC;
    signal ap_sig_749 : BOOLEAN;
    signal ap_sig_cseq_ST_st90_fsm_89 : STD_LOGIC;
    signal ap_sig_761 : BOOLEAN;
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_556_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_773 : BOOLEAN;
    signal tmp_3_fu_622_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_634_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_642_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_630_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_663_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_fu_752_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_764_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_772_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_cast_fu_760_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_776_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_788_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_794_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_fu_806_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_814_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_802_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_44_fu_818_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal extLd_fu_849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_fu_890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_pixP1_fu_945_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_pixP2_fu_952_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_4_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_i_cast2_fu_1005_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1008_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_i_fu_1022_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_i_cast_fu_1027_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i6_cast1_fu_1039_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_1042_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_i9_fu_1056_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_i9_cast_fu_1061_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_1073_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_assign_1_cast_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_cast_fu_1091_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_1080_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_4_i_i_fu_1087_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_5_i_i_fu_1095_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_22_fu_1107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_fu_1101_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_20_fu_1115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1119_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_1136_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sh_assign_3_cast_fu_1147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i1_cast_fu_1154_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i5_fu_1143_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_4_i_i1_fu_1150_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_5_i_i1_fu_1158_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_36_fu_1170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i1_fu_1164_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_27_fu_1178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1182_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (110 downto 0);

    component L2triggerv5_dadd_64ns_64ns_64_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_dmul_64ns_64ns_64_10_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_uitodp_32ns_64_8 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_dsqrt_64ns_64ns_64_59 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_sum_overP1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component L2triggerv5_data_shift1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component L2triggerv5_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        n_pixels_in_bus : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    L2triggerv5_CTRL_BUS_s_axi_U : component L2triggerv5_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        n_pixels_in_bus => n_pixels_in_bus);

    sum_overP1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_overP1_address0,
        ce0 => sum_overP1_ce0,
        we0 => sum_overP1_we0,
        d0 => sum_overP1_d0,
        q0 => sum_overP1_q0);

    sum_overP2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_overP2_address0,
        ce0 => sum_overP2_ce0,
        we0 => sum_overP2_we0,
        d0 => sum_overP2_d0,
        q0 => sum_overP2_q0);

    sum_pix1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix1_address0,
        ce0 => sum_pix1_ce0,
        we0 => sum_pix1_we0,
        d0 => sum_pix1_d0,
        q0 => sum_pix1_q0);

    data_shift1_U : component L2triggerv5_data_shift1
    generic map (
        DataWidth => 17,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_shift1_address0,
        ce0 => data_shift1_ce0,
        we0 => data_shift1_we0,
        d0 => data_shift1_d0,
        q0 => data_shift1_q0);

    thresh1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => thresh1_address0,
        ce0 => thresh1_ce0,
        we0 => thresh1_we0,
        d0 => thresh1_d0,
        q0 => thresh1_q0);

    sum_pix2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix2_address0,
        ce0 => sum_pix2_ce0,
        we0 => sum_pix2_we0,
        d0 => sum_pix2_d0,
        q0 => sum_pix2_q0);

    data_shift2_U : component L2triggerv5_data_shift1
    generic map (
        DataWidth => 17,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_shift2_address0,
        ce0 => data_shift2_ce0,
        we0 => data_shift2_we0,
        d0 => data_shift2_d0,
        q0 => data_shift2_q0);

    thresh2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => thresh2_address0,
        ce0 => thresh2_ce0,
        we0 => thresh2_we0,
        d0 => thresh2_d0,
        q0 => thresh2_q0);

    L2triggerv5_dadd_64ns_64ns_64_9_full_dsp_U1 : component L2triggerv5_dadd_64ns_64ns_64_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_17_reg_1481,
        din1 => tmp_19_reg_1503,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p2);

    L2triggerv5_dadd_64ns_64ns_64_9_full_dsp_U2 : component L2triggerv5_dadd_64ns_64ns_64_9_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_23_reg_1487,
        din1 => tmp_25_reg_1508,
        ce => ap_const_logic_1,
        dout => grp_fu_539_p2);

    L2triggerv5_dmul_64ns_64ns_64_10_max_dsp_U3 : component L2triggerv5_dmul_64ns_64ns_64_10_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_18_reg_1493,
        din1 => ap_const_lv64_4018000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_543_p2);

    L2triggerv5_dmul_64ns_64ns_64_10_max_dsp_U4 : component L2triggerv5_dmul_64ns_64ns_64_10_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_24_reg_1498,
        din1 => ap_const_lv64_4018000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_548_p2);

    L2triggerv5_uitodp_32ns_64_8_U5 : component L2triggerv5_uitodp_32ns_64_8
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_553_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_553_p1);

    L2triggerv5_uitodp_32ns_64_8_U6 : component L2triggerv5_uitodp_32ns_64_8
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_556_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_556_p1);

    L2triggerv5_dsqrt_64ns_64ns_64_59_U7 : component L2triggerv5_dsqrt_64ns_64ns_64_59
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_17_reg_1481,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p2);

    L2triggerv5_dsqrt_64ns_64ns_64_59_U8 : component L2triggerv5_dsqrt_64ns_64ns_64_59
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_23_reg_1487,
        ce => ap_const_logic_1,
        dout => grp_fu_564_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_stream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY))))) then 
                    ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_logic_1 = out_stream_TREADY)))) then 
                    ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_610_p2 = ap_const_lv1_0))) then 
                i_1_reg_479 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_652_p2))) then 
                i_1_reg_479 <= i_5_fu_657_p2;
            end if; 
        end if;
    end process;

    i_2_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_674_p2))) then 
                i_2_reg_501 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                i_2_reg_501 <= i_7_reg_1257;
            end if; 
        end if;
    end process;

    i_3_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_674_p2)))) then 
                i_3_reg_524 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
                i_3_reg_524 <= i_6_reg_1435;
            end if; 
        end if;
    end process;

    i_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_591_p2))) then 
                i_reg_457 <= i_4_fu_596_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_457 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    k_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond7_fu_691_p2)))) then 
                k_reg_490 <= k_1_reg_1244;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_610_p2 = ap_const_lv1_0)))) then 
                k_reg_490 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    kk_1_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                kk_1_reg_513 <= kk_3_reg_1355;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                kk_1_reg_513 <= ap_const_lv4_6;
            end if; 
        end if;
    end process;

    kk_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond8_fu_652_p2)))) then 
                kk_reg_468 <= kk_2_reg_1223;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond9_fu_591_p2)))) then 
                kk_reg_468 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                data_shift1_addr_reg_1322 <= tmp_8_reg_1262(14 - 1 downto 0);
                data_shift2_addr_reg_1327 <= tmp_8_reg_1262(14 - 1 downto 0);
                sum_overP1_addr_reg_1332 <= tmp_8_reg_1262(11 - 1 downto 0);
                sum_overP2_addr_reg_1337 <= tmp_8_reg_1262(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                data_shift1_load_reg_1370 <= data_shift1_q0;
                data_shift2_load_reg_1376 <= data_shift2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                i_6_reg_1435 <= i_6_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                i_7_reg_1257 <= i_7_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108)) then
                isNeg_1_reg_1545 <= sh_assign_2_fu_1042_p2(11 downto 11);
                isNeg_reg_1535 <= sh_assign_fu_1008_p2(11 downto 11);
                sh_assign_1_reg_1540 <= sh_assign_1_fu_1031_p3;
                sh_assign_3_reg_1550 <= sh_assign_3_fu_1065_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                k_1_reg_1244 <= k_1_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                kk_2_reg_1223 <= kk_2_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = tmp_37_fu_744_p3))) then
                kk_3_reg_1355 <= kk_3_fu_830_p2;
                tmp_41_reg_1345 <= tmp_41_fu_782_p2;
                tmp_45_reg_1350 <= tmp_45_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond6_fu_894_p2))) then
                l3_data_last_V_reg_1456 <= l3_data_last_V_fu_911_p2;
                    tmp_13_reg_1440(14 downto 0) <= tmp_13_fu_905_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then
                loc_V_1_reg_1519 <= loc_V_1_fu_983_p1;
                loc_V_2_reg_1524 <= p_Val2_4_fu_987_p1(62 downto 52);
                loc_V_3_reg_1530 <= loc_V_3_fu_1001_p1;
                loc_V_reg_1513 <= p_Val2_s_fu_969_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((in_stream_TVALID = ap_const_logic_0)))) then
                phitmp_reg_1297 <= in_stream_TDATA(31 downto 16);
                tmp_10_reg_1312 <= tmp_10_fu_735_p1;
                tmp_11_reg_1317 <= tmp_11_fu_739_p2;
                tmp_5_reg_1292 <= tmp_5_fu_712_p1;
                tmp_6_reg_1302 <= tmp_6_fu_726_p1;
                tmp_7_reg_1307 <= tmp_7_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then
                reg_569 <= sum_overP1_q0;
                reg_573 <= sum_overP2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st110_fsm_109)) then
                result_V_1_reg_1560 <= result_V_1_fu_1192_p3;
                result_V_reg_1555 <= result_V_fu_1129_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond7_fu_691_p2))) then
                sum_pix1_addr_2_reg_1272 <= tmp_8_fu_702_p1(11 - 1 downto 0);
                sum_pix2_addr_2_reg_1277 <= tmp_8_fu_702_p1(11 - 1 downto 0);
                    tmp_8_reg_1262(14 downto 0) <= tmp_8_fu_702_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                sum_pix1_load_1_reg_1282 <= sum_pix1_q0;
                sum_pix2_load_1_reg_1287 <= sum_pix2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                thresh1_load_reg_1409 <= thresh1_q0;
                tmp_32_reg_1397 <= tmp_32_fu_872_p2;
                tmp_33_reg_1403 <= tmp_33_fu_877_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                thresh2_load_reg_1423 <= thresh2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY)))) then
                tmp_14_reg_1461 <= sum_pix1_q0(31 downto 7);
                tmp_15_reg_1466 <= sum_pix2_q0(31 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29)) then
                tmp_17_reg_1481 <= grp_fu_553_p1;
                tmp_23_reg_1487 <= grp_fu_556_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st89_fsm_88)) then
                tmp_18_reg_1493 <= grp_fu_559_p2;
                tmp_24_reg_1498 <= grp_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st99_fsm_98)) then
                tmp_19_reg_1503 <= grp_fu_543_p2;
                tmp_25_reg_1508 <= grp_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_610_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_1228(14 downto 7) <= tmp_1_fu_646_p2(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_30_reg_1382 <= tmp_30_fu_860_p2;
                tmp_31_reg_1387 <= tmp_31_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_34_reg_1414 <= tmp_34_fu_882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = tmp_34_reg_1414))) then
                tmp_35_reg_1428 <= tmp_35_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_674_p2)))) then
                tmp_4_reg_1249 <= tmp_4_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_1207(14 downto 0) <= tmp_fu_587_p1(14 downto 0);
                tmp_s_reg_1199 <= n_pixels_in_bus(15 downto 1);
            end if;
        end if;
    end process;
    tmp_reg_1207(15) <= '0';
    tmp_1_reg_1228(6 downto 0) <= "0000000";
    tmp_8_reg_1262(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    tmp_13_reg_1440(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, in_stream_TVALID, exitcond1_fu_610_p2, exitcond_fu_674_p2, exitcond7_fu_691_p2, tmp_37_fu_744_p3, tmp_34_fu_882_p2, exitcond6_fu_894_p2, ap_sig_ioackin_out_stream_TREADY, exitcond9_fu_591_p2, exitcond8_fu_652_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond9_fu_591_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_610_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond8_fu_652_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_674_p2))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond7_fu_691_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((in_stream_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = tmp_37_fu_744_p3))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_lv1_0 = tmp_34_fu_882_p2))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_894_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st106_fsm_105;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st109_fsm_108;
            when ap_ST_st109_fsm_108 => 
                ap_NS_fsm <= ap_ST_st110_fsm_109;
            when ap_ST_st110_fsm_109 => 
                ap_NS_fsm <= ap_ST_st111_fsm_110;
            when ap_ST_st111_fsm_110 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond6_fu_894_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond6_fu_894_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond6_fu_894_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond6_fu_894_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_215_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_215 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_222 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_241 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_250 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_265 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_274_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_274 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_289 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_307 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_333_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_333 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_348 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_364_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_364 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_379_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_379 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_392 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_405_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_405 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_418_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_418 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_427_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_427 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_438 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_466_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_466 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_477_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_477 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_488_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_488 <= (ap_const_lv1_1 = ap_CS_fsm(88 downto 88));
    end process;


    ap_sig_499_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_499 <= (ap_const_lv1_1 = ap_CS_fsm(98 downto 98));
    end process;


    ap_sig_510_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_510 <= (ap_const_lv1_1 = ap_CS_fsm(107 downto 107));
    end process;


    ap_sig_525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_525 <= (ap_const_lv1_1 = ap_CS_fsm(108 downto 108));
    end process;


    ap_sig_540_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_540 <= (ap_const_lv1_1 = ap_CS_fsm(109 downto 109));
    end process;


    ap_sig_642_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_642 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_653_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_653 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_662_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_662 <= (ap_const_lv1_1 = ap_CS_fsm(110 downto 110));
    end process;


    ap_sig_749_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_749 <= (ap_const_lv1_1 = ap_CS_fsm(99 downto 99));
    end process;


    ap_sig_761_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_761 <= (ap_const_lv1_1 = ap_CS_fsm(89 downto 89));
    end process;


    ap_sig_773_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_773 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_cseq_ST_st100_fsm_99_assign_proc : process(ap_sig_749)
    begin
        if (ap_sig_749) then 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st108_fsm_107_assign_proc : process(ap_sig_510)
    begin
        if (ap_sig_510) then 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st109_fsm_108_assign_proc : process(ap_sig_525)
    begin
        if (ap_sig_525) then 
            ap_sig_cseq_ST_st109_fsm_108 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st109_fsm_108 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_348)
    begin
        if (ap_sig_348) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st110_fsm_109_assign_proc : process(ap_sig_540)
    begin
        if (ap_sig_540) then 
            ap_sig_cseq_ST_st110_fsm_109 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st110_fsm_109 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st111_fsm_110_assign_proc : process(ap_sig_662)
    begin
        if (ap_sig_662) then 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_364)
    begin
        if (ap_sig_364) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_215)
    begin
        if (ap_sig_215) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_379)
    begin
        if (ap_sig_379) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_653)
    begin
        if (ap_sig_653) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_222)
    begin
        if (ap_sig_222) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_392)
    begin
        if (ap_sig_392) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_405)
    begin
        if (ap_sig_405) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_418)
    begin
        if (ap_sig_418) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_427)
    begin
        if (ap_sig_427) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_642)
    begin
        if (ap_sig_642) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_438)
    begin
        if (ap_sig_438) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_466)
    begin
        if (ap_sig_466) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_241)
    begin
        if (ap_sig_241) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_477)
    begin
        if (ap_sig_477) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_773)
    begin
        if (ap_sig_773) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_250)
    begin
        if (ap_sig_250) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_265)
    begin
        if (ap_sig_265) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_274)
    begin
        if (ap_sig_274) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_289)
    begin
        if (ap_sig_289) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_307)
    begin
        if (ap_sig_307) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st89_fsm_88_assign_proc : process(ap_sig_488)
    begin
        if (ap_sig_488) then 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st89_fsm_88 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st90_fsm_89_assign_proc : process(ap_sig_761)
    begin
        if (ap_sig_761) then 
            ap_sig_cseq_ST_st90_fsm_89 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st90_fsm_89 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st99_fsm_98_assign_proc : process(ap_sig_499)
    begin
        if (ap_sig_499) then 
            ap_sig_cseq_ST_st99_fsm_98 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st99_fsm_98 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_333)
    begin
        if (ap_sig_333) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_out_stream_TREADY_assign_proc : process(out_stream_TREADY, ap_reg_ioackin_out_stream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_stream_TREADY)) then 
            ap_sig_ioackin_out_stream_TREADY <= out_stream_TREADY;
        else 
            ap_sig_ioackin_out_stream_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_shift1_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, data_shift1_addr_reg_1322, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, tmp_17_cast_fu_668_p1, tmp_47_cast_fu_844_p1, tmp_51_cast_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            data_shift1_address0 <= tmp_51_cast_fu_852_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            data_shift1_address0 <= data_shift1_addr_reg_1322;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift1_address0 <= tmp_17_cast_fu_668_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            data_shift1_address0 <= tmp_47_cast_fu_844_p1(14 - 1 downto 0);
        else 
            data_shift1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift1_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            data_shift1_ce0 <= ap_const_logic_1;
        else 
            data_shift1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift1_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, data_shift1_load_reg_1370, ap_sig_cseq_ST_st13_fsm_12, tmp_10_cast_fu_836_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            data_shift1_d0 <= data_shift1_load_reg_1370;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            data_shift1_d0 <= tmp_10_cast_fu_836_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift1_d0 <= ap_const_lv17_0;
        else 
            data_shift1_d0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift1_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, tmp_37_fu_744_p3, ap_sig_cseq_ST_st13_fsm_12, exitcond8_fu_652_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_652_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_37_fu_744_p3))))) then 
            data_shift1_we0 <= ap_const_logic_1;
        else 
            data_shift1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift2_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, data_shift2_addr_reg_1327, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, tmp_17_cast_fu_668_p1, tmp_47_cast_fu_844_p1, tmp_51_cast_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            data_shift2_address0 <= tmp_51_cast_fu_852_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            data_shift2_address0 <= data_shift2_addr_reg_1327;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift2_address0 <= tmp_17_cast_fu_668_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            data_shift2_address0 <= tmp_47_cast_fu_844_p1(14 - 1 downto 0);
        else 
            data_shift2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift2_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            data_shift2_ce0 <= ap_const_logic_1;
        else 
            data_shift2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift2_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, data_shift2_load_reg_1376, ap_sig_cseq_ST_st13_fsm_12, tmp_12_cast_fu_840_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            data_shift2_d0 <= data_shift2_load_reg_1376;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            data_shift2_d0 <= tmp_12_cast_fu_840_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift2_d0 <= ap_const_lv17_0;
        else 
            data_shift2_d0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift2_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st10_fsm_9, tmp_37_fu_744_p3, ap_sig_cseq_ST_st13_fsm_12, exitcond8_fu_652_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_652_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_37_fu_744_p3))))) then 
            data_shift2_we0 <= ap_const_logic_1;
        else 
            data_shift2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_610_p2 <= "1" when (kk_reg_468 = ap_const_lv4_8) else "0";
    exitcond6_fu_894_p2 <= "1" when (i_3_reg_524 = tmp_s_reg_1199) else "0";
    exitcond7_fu_691_p2 <= "1" when (i_2_reg_501 = tmp_s_reg_1199) else "0";
    exitcond8_fu_652_p2 <= "1" when (i_1_reg_479 = tmp_s_reg_1199) else "0";
    exitcond9_fu_591_p2 <= "1" when (i_reg_457 = tmp_s_reg_1199) else "0";
    exitcond_fu_674_p2 <= "1" when (k_reg_490 = ap_const_lv8_80) else "0";
        extLd1_fu_857_p1 <= std_logic_vector(resize(signed(data_shift2_load_reg_1376),32));

        extLd_fu_849_p1 <= std_logic_vector(resize(signed(data_shift1_load_reg_1370),32));

    grp_fu_553_p0 <= std_logic_vector(resize(unsigned(sum_pixP1_fu_945_p3),32));
    grp_fu_556_p0 <= std_logic_vector(resize(unsigned(sum_pixP2_fu_952_p3),32));
    i_3_cast_fu_890_p1 <= std_logic_vector(resize(unsigned(i_3_reg_524),16));
    i_4_fu_596_p2 <= std_logic_vector(unsigned(i_reg_457) + unsigned(ap_const_lv15_1));
    i_5_fu_657_p2 <= std_logic_vector(unsigned(i_1_reg_479) + unsigned(ap_const_lv15_1));
    i_6_fu_899_p2 <= std_logic_vector(unsigned(i_3_reg_524) + unsigned(ap_const_lv15_1));
    i_7_fu_696_p2 <= std_logic_vector(unsigned(i_2_reg_501) + unsigned(ap_const_lv15_1));

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((in_stream_TVALID = ap_const_logic_0))))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_1048_p3 <= sh_assign_2_fu_1042_p2(11 downto 11);
    isNeg_fu_1014_p3 <= sh_assign_fu_1008_p2(11 downto 11);
    k_1_fu_680_p2 <= std_logic_vector(unsigned(k_reg_490) + unsigned(ap_const_lv8_1));
    kk_2_fu_616_p2 <= std_logic_vector(unsigned(kk_reg_468) + unsigned(ap_const_lv4_1));
    kk_3_fu_830_p2 <= std_logic_vector(unsigned(kk_1_reg_513) + unsigned(ap_const_lv4_F));
    l3_data_last_V_fu_911_p2 <= "1" when (i_3_cast_fu_890_p1 = tmp_4_reg_1249) else "0";
    loc_V_1_fu_983_p1 <= p_Val2_s_fu_969_p1(52 - 1 downto 0);
    loc_V_3_fu_1001_p1 <= p_Val2_4_fu_987_p1(52 - 1 downto 0);
    out_stream_TDATA <= (sum_pix2_q0 & sum_pix1_q0);

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_TREADY, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= ap_const_lv6_0;
    out_stream_TID <= ap_const_lv5_0;
    out_stream_TKEEP <= ap_const_lv8_FF;
    out_stream_TLAST <= l3_data_last_V_reg_1456;
    out_stream_TSTRB <= ap_const_lv8_FF;
    out_stream_TUSER <= ap_const_lv2_0;

    out_stream_TVALID_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, ap_reg_ioackin_out_stream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_logic_0 = ap_reg_ioackin_out_stream_TREADY)))) then 
            out_stream_TVALID <= ap_const_logic_1;
        else 
            out_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_1136_p3 <= (ap_const_lv1_1 & loc_V_3_reg_1530);
    p_Result_s_fu_1073_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1519);
    p_Val2_4_fu_987_p1 <= grp_fu_539_p2;
    p_Val2_s_fu_969_p1 <= grp_fu_535_p2;
    p_shl1_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_634_p3),15));
    p_shl2_cast_fu_802_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_794_p3),15));
    p_shl3_cast_fu_814_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_806_p3),15));
        p_shl4_cast_fu_760_p1 <= std_logic_vector(resize(signed(tmp_38_fu_752_p3),15));

        p_shl5_cast_fu_772_p1 <= std_logic_vector(resize(signed(tmp_39_fu_764_p3),15));

    p_shl_cast_fu_630_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_622_p3),15));
    phitmp_fu_716_p4 <= in_stream_TDATA(31 downto 16);
    result_V_1_fu_1192_p3 <= 
        tmp_27_fu_1178_p1 when (isNeg_1_reg_1545(0) = '1') else 
        tmp_29_fu_1182_p4;
    result_V_fu_1129_p3 <= 
        tmp_20_fu_1115_p1 when (isNeg_reg_1535(0) = '1') else 
        tmp_21_fu_1119_p4;
        sh_assign_1_cast_fu_1084_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_1540),32));

    sh_assign_1_fu_1031_p3 <= 
        tmp_2_i_i_cast_fu_1027_p1 when (isNeg_fu_1014_p3(0) = '1') else 
        sh_assign_fu_1008_p2;
    sh_assign_2_fu_1042_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i6_cast1_fu_1039_p1));
        sh_assign_3_cast_fu_1147_p1 <= std_logic_vector(resize(signed(sh_assign_3_reg_1550),32));

    sh_assign_3_fu_1065_p3 <= 
        tmp_2_i_i9_cast_fu_1061_p1 when (isNeg_1_fu_1048_p3(0) = '1') else 
        sh_assign_2_fu_1042_p2;
    sh_assign_fu_1008_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast2_fu_1005_p1));

    sum_overP1_address0_assign_proc : process(tmp_8_reg_1262, ap_sig_cseq_ST_st9_fsm_8, sum_overP1_addr_reg_1332, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP1_address0 <= tmp_8_reg_1262(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP1_address0 <= sum_overP1_addr_reg_1332;
        else 
            sum_overP1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_overP1_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP1_ce0 <= ap_const_logic_1;
        else 
            sum_overP1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP1_d0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, tmp_30_reg_1382, tmp_32_reg_1397, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            sum_overP1_d0 <= tmp_32_reg_1397;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            sum_overP1_d0 <= tmp_30_reg_1382;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP1_d0 <= ap_const_lv32_0;
        else 
            sum_overP1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_overP1_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP1_we0 <= ap_const_logic_1;
        else 
            sum_overP1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP2_address0_assign_proc : process(tmp_8_reg_1262, ap_sig_cseq_ST_st9_fsm_8, sum_overP2_addr_reg_1337, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP2_address0 <= tmp_8_reg_1262(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP2_address0 <= sum_overP2_addr_reg_1337;
        else 
            sum_overP2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_overP2_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP2_ce0 <= ap_const_logic_1;
        else 
            sum_overP2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP2_d0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, tmp_31_reg_1387, tmp_33_reg_1403, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            sum_overP2_d0 <= tmp_33_reg_1403;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            sum_overP2_d0 <= tmp_31_reg_1387;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP2_d0 <= ap_const_lv32_0;
        else 
            sum_overP2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_overP2_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            sum_overP2_we0 <= ap_const_logic_1;
        else 
            sum_overP2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_8_fu_702_p1, sum_pix1_addr_2_reg_1272, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st21_fsm_20, tmp_13_fu_905_p1, tmp_2_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix1_address0 <= sum_pix1_addr_2_reg_1272;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_address0 <= tmp_2_fu_602_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            sum_pix1_address0 <= tmp_13_fu_905_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            sum_pix1_address0 <= tmp_8_fu_702_p1(11 - 1 downto 0);
        else 
            sum_pix1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_pix1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            sum_pix1_ce0 <= ap_const_logic_1;
        else 
            sum_pix1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_7_reg_1307, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix1_d0 <= tmp_7_reg_1307;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_d0 <= ap_const_lv32_0;
        else 
            sum_pix1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, exitcond9_fu_591_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_591_p2)))) then 
            sum_pix1_we0 <= ap_const_logic_1;
        else 
            sum_pix1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_8_fu_702_p1, sum_pix2_addr_2_reg_1277, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st21_fsm_20, tmp_13_fu_905_p1, tmp_2_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix2_address0 <= sum_pix2_addr_2_reg_1277;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_address0 <= tmp_2_fu_602_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            sum_pix2_address0 <= tmp_13_fu_905_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            sum_pix2_address0 <= tmp_8_fu_702_p1(11 - 1 downto 0);
        else 
            sum_pix2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_pix2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            sum_pix2_ce0 <= ap_const_logic_1;
        else 
            sum_pix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_11_reg_1317, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix2_d0 <= tmp_11_reg_1317;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_d0 <= ap_const_lv32_0;
        else 
            sum_pix2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, exitcond9_fu_591_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_591_p2)))) then 
            sum_pix2_we0 <= ap_const_logic_1;
        else 
            sum_pix2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_pixP1_fu_945_p3 <= (tmp_14_reg_1461 & ap_const_lv3_0);
    sum_pixP2_fu_952_p3 <= (tmp_15_reg_1466 & ap_const_lv3_0);

    thresh1_address0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st2_fsm_1, tmp_8_reg_1262, tmp_13_reg_1440, ap_sig_cseq_ST_st111_fsm_110, tmp_2_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
            thresh1_address0 <= tmp_13_reg_1440(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh1_address0 <= tmp_2_fu_602_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            thresh1_address0 <= tmp_8_reg_1262(11 - 1 downto 0);
        else 
            thresh1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    thresh1_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110))) then 
            thresh1_ce0 <= ap_const_logic_1;
        else 
            thresh1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, result_V_reg_1555, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
            thresh1_d0 <= result_V_reg_1555;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh1_d0 <= ap_const_lv32_FF;
        else 
            thresh1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    thresh1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_591_p2, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_591_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110))) then 
            thresh1_we0 <= ap_const_logic_1;
        else 
            thresh1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_8_reg_1262, ap_sig_cseq_ST_st17_fsm_16, tmp_13_reg_1440, ap_sig_cseq_ST_st111_fsm_110, tmp_2_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
            thresh2_address0 <= tmp_13_reg_1440(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh2_address0 <= tmp_2_fu_602_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            thresh2_address0 <= tmp_8_reg_1262(11 - 1 downto 0);
        else 
            thresh2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    thresh2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110))) then 
            thresh2_ce0 <= ap_const_logic_1;
        else 
            thresh2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, result_V_1_reg_1560, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
            thresh2_d0 <= result_V_1_reg_1560;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh2_d0 <= ap_const_lv32_FF;
        else 
            thresh2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    thresh2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_591_p2, ap_sig_cseq_ST_st111_fsm_110)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_591_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110))) then 
            thresh2_we0 <= ap_const_logic_1;
        else 
            thresh2_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_836_p1 <= std_logic_vector(resize(signed(tmp_5_reg_1292),17));

        tmp_10_fu_735_p1 <= std_logic_vector(resize(signed(phitmp_fu_716_p4),32));

    tmp_11_fu_739_p2 <= std_logic_vector(unsigned(sum_pix2_load_1_reg_1287) + unsigned(tmp_10_fu_735_p1));
        tmp_12_cast_fu_840_p1 <= std_logic_vector(resize(signed(phitmp_reg_1297),17));

    tmp_12_fu_663_p2 <= std_logic_vector(unsigned(tmp_1_reg_1228) + unsigned(i_1_reg_479));
    tmp_13_fu_905_p1 <= std_logic_vector(resize(unsigned(i_3_reg_524),64));
    tmp_17_cast_fu_668_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_663_p2),64));
    tmp_1_fu_646_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_642_p1) + unsigned(p_shl_cast_fu_630_p1));
    tmp_20_fu_1115_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_1107_p3),32));
    tmp_21_fu_1119_p4 <= tmp_7_i_i_fu_1101_p2(83 downto 52);
    tmp_22_fu_1107_p3 <= tmp_5_i_i_fu_1095_p2(52 downto 52);
    tmp_27_fu_1178_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1170_p3),32));
    tmp_28_fu_788_p2 <= std_logic_vector(unsigned(kk_1_reg_513) + unsigned(ap_const_lv4_1));
    tmp_29_fu_1182_p4 <= tmp_7_i_i1_fu_1164_p2(83 downto 52);
    tmp_2_fu_602_p1 <= std_logic_vector(resize(unsigned(i_reg_457),64));
        tmp_2_i_i9_cast_fu_1061_p1 <= std_logic_vector(resize(signed(tmp_2_i_i9_fu_1056_p2),12));

    tmp_2_i_i9_fu_1056_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_reg_1524));
        tmp_2_i_i_cast_fu_1027_p1 <= std_logic_vector(resize(signed(tmp_2_i_i_fu_1022_p2),12));

    tmp_2_i_i_fu_1022_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_1513));
    tmp_30_fu_860_p2 <= std_logic_vector(unsigned(reg_569) + unsigned(extLd_fu_849_p1));
    tmp_31_fu_866_p2 <= std_logic_vector(unsigned(reg_573) + unsigned(extLd1_fu_857_p1));
    tmp_32_fu_872_p2 <= std_logic_vector(signed(tmp_6_reg_1302) + signed(reg_569));
    tmp_33_fu_877_p2 <= std_logic_vector(signed(tmp_10_reg_1312) + signed(reg_573));
    tmp_34_fu_882_p2 <= "1" when (unsigned(tmp_32_reg_1397) > unsigned(thresh1_load_reg_1409)) else "0";
    tmp_35_fu_886_p2 <= "1" when (unsigned(tmp_33_reg_1403) > unsigned(thresh2_load_reg_1423)) else "0";
    tmp_36_fu_1170_p3 <= tmp_5_i_i1_fu_1158_p2(52 downto 52);
    tmp_37_fu_744_p3 <= kk_1_reg_513(3 downto 3);
    tmp_38_fu_752_p3 <= (kk_1_reg_513 & ap_const_lv10_0);
    tmp_39_fu_764_p3 <= (kk_1_reg_513 & ap_const_lv7_0);
    tmp_3_fu_622_p3 <= (kk_reg_468 & ap_const_lv10_0);
    tmp_40_fu_776_p2 <= std_logic_vector(signed(p_shl5_cast_fu_772_p1) + signed(p_shl4_cast_fu_760_p1));
    tmp_41_fu_782_p2 <= std_logic_vector(unsigned(tmp_40_fu_776_p2) + unsigned(i_2_reg_501));
    tmp_42_fu_794_p3 <= (tmp_28_fu_788_p2 & ap_const_lv10_0);
    tmp_43_fu_806_p3 <= (tmp_28_fu_788_p2 & ap_const_lv7_0);
    tmp_44_fu_818_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_814_p1) + unsigned(p_shl2_cast_fu_802_p1));
    tmp_45_fu_824_p2 <= std_logic_vector(unsigned(tmp_44_fu_818_p2) + unsigned(i_2_reg_501));
    tmp_47_cast_fu_844_p1 <= std_logic_vector(resize(unsigned(tmp_41_reg_1345),64));
    tmp_4_fu_686_p2 <= std_logic_vector(unsigned(tmp_reg_1207) + unsigned(ap_const_lv16_FFFF));
    tmp_4_i_i1_cast_fu_1154_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1147_p1),53));
    tmp_4_i_i1_fu_1150_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1147_p1),136));
    tmp_4_i_i_cast_fu_1091_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1084_p1),53));
    tmp_4_i_i_fu_1087_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1084_p1),136));
    tmp_51_cast_fu_852_p1 <= std_logic_vector(resize(unsigned(tmp_45_reg_1350),64));
    tmp_5_fu_712_p1 <= in_stream_TDATA(16 - 1 downto 0);
    tmp_5_i_i1_fu_1158_p2 <= std_logic_vector(shift_right(unsigned(p_Result_4_fu_1136_p3),to_integer(unsigned('0' & tmp_4_i_i1_cast_fu_1154_p1(31-1 downto 0)))));
    tmp_5_i_i_fu_1095_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_1073_p3),to_integer(unsigned('0' & tmp_4_i_i_cast_fu_1091_p1(31-1 downto 0)))));
        tmp_6_fu_726_p1 <= std_logic_vector(resize(signed(tmp_5_fu_712_p1),32));

    tmp_7_fu_730_p2 <= std_logic_vector(unsigned(sum_pix1_load_1_reg_1282) + unsigned(tmp_6_fu_726_p1));
    tmp_7_i_i1_fu_1164_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i5_fu_1143_p1),to_integer(unsigned('0' & tmp_4_i_i1_fu_1150_p1(31-1 downto 0)))));
    tmp_7_i_i_fu_1101_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_1080_p1),to_integer(unsigned('0' & tmp_4_i_i_fu_1087_p1(31-1 downto 0)))));
    tmp_8_fu_702_p1 <= std_logic_vector(resize(unsigned(i_2_reg_501),64));
    tmp_9_fu_634_p3 <= (kk_reg_468 & ap_const_lv7_0);
    tmp_fu_587_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_577_p4),16));
    tmp_i_i5_fu_1143_p1 <= std_logic_vector(resize(unsigned(p_Result_4_fu_1136_p3),136));
    tmp_i_i_fu_1080_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_1073_p3),136));
    tmp_i_i_i6_cast1_fu_1039_p1 <= std_logic_vector(resize(unsigned(loc_V_2_reg_1524),12));
    tmp_i_i_i_cast2_fu_1005_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_1513),12));
    tmp_s_fu_577_p4 <= n_pixels_in_bus(15 downto 1);

    trig_data_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_34_reg_1414, tmp_35_fu_886_p2, tmp_35_reg_1428, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (not((ap_const_lv1_0 = tmp_34_reg_1414)) or not((ap_const_lv1_0 = tmp_35_fu_886_p2))))) then 
            trig_data <= ap_const_lv32_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (not((ap_const_lv1_0 = tmp_34_reg_1414)) or not((ap_const_lv1_0 = tmp_35_reg_1428)))))) then 
            trig_data <= ap_const_lv32_0;
        else 
            trig_data <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    trig_data_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_34_reg_1414, tmp_35_fu_886_p2, tmp_35_reg_1428, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (not((ap_const_lv1_0 = tmp_34_reg_1414)) or not((ap_const_lv1_0 = tmp_35_fu_886_p2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (not((ap_const_lv1_0 = tmp_34_reg_1414)) or not((ap_const_lv1_0 = tmp_35_reg_1428)))))) then 
            trig_data_ap_vld <= ap_const_logic_1;
        else 
            trig_data_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
