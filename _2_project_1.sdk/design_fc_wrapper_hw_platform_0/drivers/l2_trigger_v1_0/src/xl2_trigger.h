// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XL2_TRIGGER_H
#define XL2_TRIGGER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xl2_trigger_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_bus_BaseAddress;
} XL2_trigger_Config;
#endif

typedef struct {
    u32 Ctrl_bus_BaseAddress;
    u32 IsReady;
} XL2_trigger;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XL2_trigger_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XL2_trigger_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XL2_trigger_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XL2_trigger_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XL2_trigger_Initialize(XL2_trigger *InstancePtr, u16 DeviceId);
XL2_trigger_Config* XL2_trigger_LookupConfig(u16 DeviceId);
int XL2_trigger_CfgInitialize(XL2_trigger *InstancePtr, XL2_trigger_Config *ConfigPtr);
#else
int XL2_trigger_Initialize(XL2_trigger *InstancePtr, const char* InstanceName);
int XL2_trigger_Release(XL2_trigger *InstancePtr);
#endif

void XL2_trigger_Start(XL2_trigger *InstancePtr);
u32 XL2_trigger_IsDone(XL2_trigger *InstancePtr);
u32 XL2_trigger_IsIdle(XL2_trigger *InstancePtr);
u32 XL2_trigger_IsReady(XL2_trigger *InstancePtr);
void XL2_trigger_EnableAutoRestart(XL2_trigger *InstancePtr);
void XL2_trigger_DisableAutoRestart(XL2_trigger *InstancePtr);

void XL2_trigger_Set_n_pixels_in_bus(XL2_trigger *InstancePtr, u32 Data);
u32 XL2_trigger_Get_n_pixels_in_bus(XL2_trigger *InstancePtr);

void XL2_trigger_InterruptGlobalEnable(XL2_trigger *InstancePtr);
void XL2_trigger_InterruptGlobalDisable(XL2_trigger *InstancePtr);
void XL2_trigger_InterruptEnable(XL2_trigger *InstancePtr, u32 Mask);
void XL2_trigger_InterruptDisable(XL2_trigger *InstancePtr, u32 Mask);
void XL2_trigger_InterruptClear(XL2_trigger *InstancePtr, u32 Mask);
u32 XL2_trigger_InterruptGetEnabled(XL2_trigger *InstancePtr);
u32 XL2_trigger_InterruptGetStatus(XL2_trigger *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
