-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity L2triggerv5 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_stream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    trig_data : OUT STD_LOGIC_VECTOR (31 downto 0);
    trig_data_ap_vld : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of L2triggerv5 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "L2triggerv5,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=58,HLS_SYN_DSP=28,HLS_SYN_FF=7183,HLS_SYN_LUT=11465}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (63 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (63 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (63 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (63 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (63 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv64_4018000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal n_pixels_in_bus : STD_LOGIC_VECTOR (15 downto 0);
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_115 : BOOLEAN;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal tmp_s_fu_571_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_reg_1211 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1219 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_590_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_175 : BOOLEAN;
    signal kk_2_fu_610_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal kk_2_reg_1235 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal tmp_1_fu_640_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_1240 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_651_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_199 : BOOLEAN;
    signal k_1_fu_674_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_1256 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal tmp_4_fu_680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_690_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_7_reg_1269 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_223 : BOOLEAN;
    signal tmp_8_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1274 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_pix1_addr_2_reg_1284 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix2_addr_2_reg_1289 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_shift1_addr_reg_1294 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_shift2_addr_reg_1299 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1304 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_fu_710_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_reg_1309 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_731_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP1_addr_reg_1324 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP2_addr_reg_1329 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_260 : BOOLEAN;
    signal tmp_37_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_828_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_reg_1347 : STD_LOGIC_VECTOR (14 downto 0);
    signal kk_3_fu_834_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal kk_3_reg_1352 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_282 : BOOLEAN;
    signal tmp_34_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_297 : BOOLEAN;
    signal i_6_fu_907_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_6_reg_1383 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_308 : BOOLEAN;
    signal tmp_13_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1388 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l3_data_last_V_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l3_data_last_V_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1409 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_ioackin_out_stream_TREADY : STD_LOGIC;
    signal tmp_15_reg_1414 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_336 : BOOLEAN;
    signal grp_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_347 : BOOLEAN;
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_1435 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1441 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_358 : BOOLEAN;
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1446 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_1451 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st57_fsm_56 : STD_LOGIC;
    signal ap_sig_369 : BOOLEAN;
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1456 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_reg_1461 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_380 : BOOLEAN;
    signal loc_V_1_fu_991_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1467 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_2_reg_1472 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_3_fu_1009_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_3_reg_1478 : STD_LOGIC_VECTOR (51 downto 0);
    signal result_V_fu_1104_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_1483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st63_fsm_62 : STD_LOGIC;
    signal ap_sig_395 : BOOLEAN;
    signal result_V_1_fu_1203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_reg_1488 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP1_ce0 : STD_LOGIC;
    signal sum_overP1_we0 : STD_LOGIC;
    signal sum_overP1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_overP2_ce0 : STD_LOGIC;
    signal sum_overP2_we0 : STD_LOGIC;
    signal sum_overP2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_overP2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix1_ce0 : STD_LOGIC;
    signal sum_pix1_we0 : STD_LOGIC;
    signal sum_pix1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_shift1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_shift1_ce0 : STD_LOGIC;
    signal data_shift1_we0 : STD_LOGIC;
    signal data_shift1_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_shift1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal thresh1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal thresh1_ce0 : STD_LOGIC;
    signal thresh1_we0 : STD_LOGIC;
    signal thresh1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_pix2_ce0 : STD_LOGIC;
    signal sum_pix2_we0 : STD_LOGIC;
    signal sum_pix2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_shift2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_shift2_ce0 : STD_LOGIC;
    signal data_shift2_we0 : STD_LOGIC;
    signal data_shift2_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal data_shift2_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal thresh2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal thresh2_ce0 : STD_LOGIC;
    signal thresh2_we0 : STD_LOGIC;
    signal thresh2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_459 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond9_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kk_reg_470 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_481 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_reg_503 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_505 : BOOLEAN;
    signal kk_1_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_516 : BOOLEAN;
    signal i_3_reg_526 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_cseq_ST_st64_fsm_63 : STD_LOGIC;
    signal ap_sig_525 : BOOLEAN;
    signal tmp_2_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_out_stream_TREADY : STD_LOGIC := '0';
    signal tmp_7_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_840_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_cast_fu_844_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st58_fsm_57 : STD_LOGIC;
    signal ap_sig_615 : BOOLEAN;
    signal ap_sig_cseq_ST_st52_fsm_51 : STD_LOGIC;
    signal ap_sig_627 : BOOLEAN;
    signal grp_fu_555_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_639 : BOOLEAN;
    signal tmp_3_fu_616_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_628_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_636_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_657_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_fu_750_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_762_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_770_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl4_cast_fu_758_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_774_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_41_fu_780_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_792_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_798_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_fu_810_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_818_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_806_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_44_fu_822_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal extLd_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_fu_898_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_pixP1_fu_953_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum_pixP2_fu_960_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_4_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_1013_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_cast2_fu_1024_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1027_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_i_fu_1041_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1033_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_cast_fu_1046_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_1050_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_cast_fu_1066_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_1020_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_4_i_i_fu_1062_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_5_i_i_fu_1070_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_22_fu_1082_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i_fu_1076_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_20_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1094_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_1112_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i6_cast1_fu_1123_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_1126_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_i_i9_fu_1140_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_1132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i9_cast_fu_1145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_1149_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_cast_fu_1157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i1_cast_fu_1165_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i5_fu_1119_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_4_i_i1_fu_1161_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_5_i_i1_fu_1169_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_36_fu_1181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_i1_fu_1175_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_27_fu_1189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_1193_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (63 downto 0);

    component L2triggerv5_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_uitodp_32ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_dsqrt_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component L2triggerv5_sum_overP1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component L2triggerv5_data_shift1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component L2triggerv5_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        n_pixels_in_bus : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    L2triggerv5_CTRL_BUS_s_axi_U : component L2triggerv5_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        n_pixels_in_bus => n_pixels_in_bus);

    sum_overP1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_overP1_address0,
        ce0 => sum_overP1_ce0,
        we0 => sum_overP1_we0,
        d0 => sum_overP1_d0,
        q0 => sum_overP1_q0);

    sum_overP2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_overP2_address0,
        ce0 => sum_overP2_ce0,
        we0 => sum_overP2_we0,
        d0 => sum_overP2_d0,
        q0 => sum_overP2_q0);

    sum_pix1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix1_address0,
        ce0 => sum_pix1_ce0,
        we0 => sum_pix1_we0,
        d0 => sum_pix1_d0,
        q0 => sum_pix1_q0);

    data_shift1_U : component L2triggerv5_data_shift1
    generic map (
        DataWidth => 17,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_shift1_address0,
        ce0 => data_shift1_ce0,
        we0 => data_shift1_we0,
        d0 => data_shift1_d0,
        q0 => data_shift1_q0);

    thresh1_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => thresh1_address0,
        ce0 => thresh1_ce0,
        we0 => thresh1_we0,
        d0 => thresh1_d0,
        q0 => thresh1_q0);

    sum_pix2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix2_address0,
        ce0 => sum_pix2_ce0,
        we0 => sum_pix2_we0,
        d0 => sum_pix2_d0,
        q0 => sum_pix2_q0);

    data_shift2_U : component L2triggerv5_data_shift1
    generic map (
        DataWidth => 17,
        AddressRange => 9216,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_shift2_address0,
        ce0 => data_shift2_ce0,
        we0 => data_shift2_we0,
        d0 => data_shift2_d0,
        q0 => data_shift2_q0);

    thresh2_U : component L2triggerv5_sum_overP1
    generic map (
        DataWidth => 32,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => thresh2_address0,
        ce0 => thresh2_ce0,
        we0 => thresh2_we0,
        d0 => thresh2_d0,
        q0 => thresh2_q0);

    L2triggerv5_dadd_64ns_64ns_64_5_full_dsp_U1 : component L2triggerv5_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_17_reg_1429,
        din1 => tmp_19_reg_1451,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p2);

    L2triggerv5_dadd_64ns_64ns_64_5_full_dsp_U2 : component L2triggerv5_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_23_reg_1435,
        din1 => tmp_25_reg_1456,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p2);

    L2triggerv5_dmul_64ns_64ns_64_6_max_dsp_U3 : component L2triggerv5_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_18_reg_1441,
        din1 => ap_const_lv64_4018000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_545_p2);

    L2triggerv5_dmul_64ns_64ns_64_6_max_dsp_U4 : component L2triggerv5_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_24_reg_1446,
        din1 => ap_const_lv64_4018000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);

    L2triggerv5_uitodp_32ns_64_6_U5 : component L2triggerv5_uitodp_32ns_64_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_555_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p1);

    L2triggerv5_uitodp_32ns_64_6_U6 : component L2triggerv5_uitodp_32ns_64_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_558_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p1);

    L2triggerv5_dsqrt_64ns_64ns_64_31_U7 : component L2triggerv5_dsqrt_64ns_64ns_64_31
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_17_reg_1429,
        ce => ap_const_logic_1,
        dout => grp_fu_561_p2);

    L2triggerv5_dsqrt_64ns_64ns_64_31_U8 : component L2triggerv5_dsqrt_64ns_64ns_64_31
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => tmp_23_reg_1435,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_stream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY))))) then 
                    ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_logic_1 = out_stream_TREADY)))) then 
                    ap_reg_ioackin_out_stream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_604_p2 = ap_const_lv1_0))) then 
                i_1_reg_481 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_646_p2))) then 
                i_1_reg_481 <= i_5_fu_651_p2;
            end if; 
        end if;
    end process;

    i_2_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_668_p2))) then 
                i_2_reg_503 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                i_2_reg_503 <= i_7_reg_1269;
            end if; 
        end if;
    end process;

    i_3_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_668_p2)))) then 
                i_3_reg_526 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
                i_3_reg_526 <= i_6_reg_1383;
            end if; 
        end if;
    end process;

    i_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_585_p2))) then 
                i_reg_459 <= i_4_fu_590_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_459 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    k_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond7_fu_685_p2)))) then 
                k_reg_492 <= k_1_reg_1256;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_604_p2 = ap_const_lv1_0)))) then 
                k_reg_492 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    kk_1_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                kk_1_reg_515 <= kk_3_reg_1352;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0)))) then 
                kk_1_reg_515 <= ap_const_lv4_6;
            end if; 
        end if;
    end process;

    kk_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond8_fu_646_p2)))) then 
                kk_reg_470 <= kk_2_reg_1235;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond9_fu_585_p2)))) then 
                kk_reg_470 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0)))) then
                data_shift1_addr_reg_1294 <= tmp_8_reg_1274(14 - 1 downto 0);
                data_shift2_addr_reg_1299 <= tmp_8_reg_1274(14 - 1 downto 0);
                phitmp_reg_1309 <= in_stream_TDATA(31 downto 16);
                sum_overP1_addr_reg_1324 <= tmp_8_reg_1274(11 - 1 downto 0);
                sum_overP2_addr_reg_1329 <= tmp_8_reg_1274(11 - 1 downto 0);
                tmp_10_reg_1319 <= tmp_10_fu_731_p1;
                tmp_5_reg_1304 <= tmp_5_fu_706_p1;
                tmp_6_reg_1314 <= tmp_6_fu_720_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                i_6_reg_1383 <= i_6_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                i_7_reg_1269 <= i_7_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                k_1_reg_1256 <= k_1_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                kk_2_reg_1235 <= kk_2_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3))) then
                kk_3_reg_1352 <= kk_3_fu_834_p2;
                tmp_45_reg_1347 <= tmp_45_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = exitcond6_fu_902_p2))) then
                l3_data_last_V_reg_1404 <= l3_data_last_V_fu_919_p2;
                    tmp_13_reg_1388(14 downto 0) <= tmp_13_fu_913_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then
                loc_V_1_reg_1467 <= loc_V_1_fu_991_p1;
                loc_V_2_reg_1472 <= p_Val2_4_fu_995_p1(62 downto 52);
                loc_V_3_reg_1478 <= loc_V_3_fu_1009_p1;
                loc_V_reg_1461 <= p_Val2_s_fu_977_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st63_fsm_62)) then
                result_V_1_reg_1488 <= result_V_1_fu_1203_p3;
                result_V_reg_1483 <= result_V_fu_1104_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond7_fu_685_p2))) then
                sum_pix1_addr_2_reg_1284 <= tmp_8_fu_696_p1(11 - 1 downto 0);
                sum_pix2_addr_2_reg_1289 <= tmp_8_fu_696_p1(11 - 1 downto 0);
                    tmp_8_reg_1274(14 downto 0) <= tmp_8_fu_696_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY)))) then
                tmp_14_reg_1409 <= sum_pix1_q0(31 downto 7);
                tmp_15_reg_1414 <= sum_pix2_q0(31 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_17_reg_1429 <= grp_fu_555_p1;
                tmp_23_reg_1435 <= grp_fu_558_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st51_fsm_50)) then
                tmp_18_reg_1441 <= grp_fu_561_p2;
                tmp_24_reg_1446 <= grp_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st57_fsm_56)) then
                tmp_19_reg_1451 <= grp_fu_545_p2;
                tmp_25_reg_1456 <= grp_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_604_p2 = ap_const_lv1_0))) then
                    tmp_1_reg_1240(14 downto 7) <= tmp_1_fu_640_p2(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_33_reg_1362 <= tmp_33_fu_881_p2;
                tmp_34_reg_1367 <= tmp_34_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_34_reg_1367))) then
                tmp_35_reg_1376 <= tmp_35_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_668_p2)))) then
                tmp_4_reg_1261 <= tmp_4_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_1219(14 downto 0) <= tmp_fu_581_p1(14 downto 0);
                tmp_s_reg_1211 <= n_pixels_in_bus(15 downto 1);
            end if;
        end if;
    end process;
    tmp_reg_1219(15) <= '0';
    tmp_1_reg_1240(6 downto 0) <= "0000000";
    tmp_8_reg_1274(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    tmp_13_reg_1388(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, in_stream_TVALID, exitcond1_fu_604_p2, exitcond_fu_668_p2, exitcond7_fu_685_p2, tmp_37_fu_742_p3, exitcond6_fu_902_p2, ap_sig_ioackin_out_stream_TREADY, exitcond9_fu_585_p2, exitcond8_fu_646_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond9_fu_585_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_604_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond8_fu_646_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_668_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond7_fu_685_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((in_stream_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = tmp_37_fu_742_p3))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_902_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_out_stream_TREADY))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, exitcond6_fu_902_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond6_fu_902_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, exitcond6_fu_902_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = exitcond6_fu_902_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_115 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_175 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_199 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_223_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_223 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_260 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_282 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_297_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_297 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_308 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_336_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_336 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_347_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_347 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_358_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_358 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    ap_sig_369_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_369 <= (ap_const_lv1_1 = ap_CS_fsm(56 downto 56));
    end process;


    ap_sig_380_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_380 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    ap_sig_395_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_395 <= (ap_const_lv1_1 = ap_CS_fsm(62 downto 62));
    end process;


    ap_sig_505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_505 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_516_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_516 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_525_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_525 <= (ap_const_lv1_1 = ap_CS_fsm(63 downto 63));
    end process;


    ap_sig_615_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_615 <= (ap_const_lv1_1 = ap_CS_fsm(57 downto 57));
    end process;


    ap_sig_627_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_627 <= (ap_const_lv1_1 = ap_CS_fsm(51 downto 51));
    end process;


    ap_sig_639_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_639 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_282)
    begin
        if (ap_sig_282) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_297)
    begin
        if (ap_sig_297) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_505)
    begin
        if (ap_sig_505) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_308)
    begin
        if (ap_sig_308) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_336)
    begin
        if (ap_sig_336) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_347)
    begin
        if (ap_sig_347) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_639)
    begin
        if (ap_sig_639) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_175)
    begin
        if (ap_sig_175) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_199)
    begin
        if (ap_sig_199) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_358)
    begin
        if (ap_sig_358) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st52_fsm_51_assign_proc : process(ap_sig_627)
    begin
        if (ap_sig_627) then 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st52_fsm_51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st57_fsm_56_assign_proc : process(ap_sig_369)
    begin
        if (ap_sig_369) then 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st57_fsm_56 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st58_fsm_57_assign_proc : process(ap_sig_615)
    begin
        if (ap_sig_615) then 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st58_fsm_57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_380)
    begin
        if (ap_sig_380) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st63_fsm_62_assign_proc : process(ap_sig_395)
    begin
        if (ap_sig_395) then 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st63_fsm_62 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st64_fsm_63_assign_proc : process(ap_sig_525)
    begin
        if (ap_sig_525) then 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st64_fsm_63 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_223)
    begin
        if (ap_sig_223) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_115)
    begin
        if (ap_sig_115) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_260)
    begin
        if (ap_sig_260) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_516)
    begin
        if (ap_sig_516) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_out_stream_TREADY_assign_proc : process(out_stream_TREADY, ap_reg_ioackin_out_stream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_stream_TREADY)) then 
            ap_sig_ioackin_out_stream_TREADY <= out_stream_TREADY;
        else 
            ap_sig_ioackin_out_stream_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_shift1_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, data_shift1_addr_reg_1294, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st9_fsm_8, tmp_17_cast_fu_662_p1, tmp_47_cast_fu_786_p1, tmp_51_cast_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            data_shift1_address0 <= tmp_51_cast_fu_852_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3)))) then 
            data_shift1_address0 <= data_shift1_addr_reg_1294;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift1_address0 <= tmp_17_cast_fu_662_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3))) then 
            data_shift1_address0 <= tmp_47_cast_fu_786_p1(14 - 1 downto 0);
        else 
            data_shift1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift1_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            data_shift1_ce0 <= ap_const_logic_1;
        else 
            data_shift1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift1_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, data_shift1_q0, ap_sig_cseq_ST_st9_fsm_8, tmp_10_cast_fu_840_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            data_shift1_d0 <= data_shift1_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3)))) then 
            data_shift1_d0 <= tmp_10_cast_fu_840_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift1_d0 <= ap_const_lv17_0;
        else 
            data_shift1_d0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift1_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, exitcond8_fu_646_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_646_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            data_shift1_we0 <= ap_const_logic_1;
        else 
            data_shift1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift2_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, data_shift2_addr_reg_1299, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st9_fsm_8, tmp_17_cast_fu_662_p1, tmp_47_cast_fu_786_p1, tmp_51_cast_fu_852_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            data_shift2_address0 <= tmp_51_cast_fu_852_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3)))) then 
            data_shift2_address0 <= data_shift2_addr_reg_1299;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift2_address0 <= tmp_17_cast_fu_662_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3))) then 
            data_shift2_address0 <= tmp_47_cast_fu_786_p1(14 - 1 downto 0);
        else 
            data_shift2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift2_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            data_shift2_ce0 <= ap_const_logic_1;
        else 
            data_shift2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_shift2_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, data_shift2_q0, ap_sig_cseq_ST_st9_fsm_8, tmp_12_cast_fu_844_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            data_shift2_d0 <= data_shift2_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3)))) then 
            data_shift2_d0 <= tmp_12_cast_fu_844_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            data_shift2_d0 <= ap_const_lv17_0;
        else 
            data_shift2_d0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_shift2_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, exitcond8_fu_646_p2, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_646_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            data_shift2_we0 <= ap_const_logic_1;
        else 
            data_shift2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_604_p2 <= "1" when (kk_reg_470 = ap_const_lv4_8) else "0";
    exitcond6_fu_902_p2 <= "1" when (i_3_reg_526 = tmp_s_reg_1211) else "0";
    exitcond7_fu_685_p2 <= "1" when (i_2_reg_503 = tmp_s_reg_1211) else "0";
    exitcond8_fu_646_p2 <= "1" when (i_1_reg_481 = tmp_s_reg_1211) else "0";
    exitcond9_fu_585_p2 <= "1" when (i_reg_459 = tmp_s_reg_1211) else "0";
    exitcond_fu_668_p2 <= "1" when (k_reg_492 = ap_const_lv8_80) else "0";
        extLd1_fu_857_p1 <= std_logic_vector(resize(signed(data_shift2_q0),32));

        extLd_fu_848_p1 <= std_logic_vector(resize(signed(data_shift1_q0),32));

    grp_fu_555_p0 <= std_logic_vector(resize(unsigned(sum_pixP1_fu_953_p3),32));
    grp_fu_558_p0 <= std_logic_vector(resize(unsigned(sum_pixP2_fu_960_p3),32));
    i_3_cast_fu_898_p1 <= std_logic_vector(resize(unsigned(i_3_reg_526),16));
    i_4_fu_590_p2 <= std_logic_vector(unsigned(i_reg_459) + unsigned(ap_const_lv15_1));
    i_5_fu_651_p2 <= std_logic_vector(unsigned(i_1_reg_481) + unsigned(ap_const_lv15_1));
    i_6_fu_907_p2 <= std_logic_vector(unsigned(i_3_reg_526) + unsigned(ap_const_lv15_1));
    i_7_fu_690_p2 <= std_logic_vector(unsigned(i_2_reg_503) + unsigned(ap_const_lv15_1));

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_1132_p3 <= sh_assign_2_fu_1126_p2(11 downto 11);
    isNeg_fu_1033_p3 <= sh_assign_fu_1027_p2(11 downto 11);
    k_1_fu_674_p2 <= std_logic_vector(unsigned(k_reg_492) + unsigned(ap_const_lv8_1));
    kk_2_fu_610_p2 <= std_logic_vector(unsigned(kk_reg_470) + unsigned(ap_const_lv4_1));
    kk_3_fu_834_p2 <= std_logic_vector(unsigned(kk_1_reg_515) + unsigned(ap_const_lv4_F));
    l3_data_last_V_fu_919_p2 <= "1" when (i_3_cast_fu_898_p1 = tmp_4_reg_1261) else "0";
    loc_V_1_fu_991_p1 <= p_Val2_s_fu_977_p1(52 - 1 downto 0);
    loc_V_3_fu_1009_p1 <= p_Val2_4_fu_995_p1(52 - 1 downto 0);
    out_stream_TDATA <= (sum_pix2_q0 & sum_pix1_q0);

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_TREADY, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDEST <= ap_const_lv6_0;
    out_stream_TID <= ap_const_lv5_0;
    out_stream_TKEEP <= ap_const_lv8_F;
    out_stream_TLAST <= l3_data_last_V_reg_1404;
    out_stream_TSTRB <= ap_const_lv8_F;
    out_stream_TUSER <= ap_const_lv2_0;

    out_stream_TVALID_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, ap_reg_ioackin_out_stream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_logic_0 = ap_reg_ioackin_out_stream_TREADY)))) then 
            out_stream_TVALID <= ap_const_logic_1;
        else 
            out_stream_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_1112_p3 <= (ap_const_lv1_1 & loc_V_3_reg_1478);
    p_Result_s_fu_1013_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1467);
    p_Val2_4_fu_995_p1 <= grp_fu_541_p2;
    p_Val2_s_fu_977_p1 <= grp_fu_537_p2;
    p_shl1_cast_fu_636_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_628_p3),15));
    p_shl2_cast_fu_806_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_798_p3),15));
    p_shl3_cast_fu_818_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_810_p3),15));
        p_shl4_cast_fu_758_p1 <= std_logic_vector(resize(signed(tmp_38_fu_750_p3),15));

        p_shl5_cast_fu_770_p1 <= std_logic_vector(resize(signed(tmp_39_fu_762_p3),15));

    p_shl_cast_fu_624_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_616_p3),15));
    phitmp_fu_710_p4 <= in_stream_TDATA(31 downto 16);
    result_V_1_fu_1203_p3 <= 
        tmp_27_fu_1189_p1 when (isNeg_1_fu_1132_p3(0) = '1') else 
        tmp_29_fu_1193_p4;
    result_V_fu_1104_p3 <= 
        tmp_20_fu_1090_p1 when (isNeg_fu_1033_p3(0) = '1') else 
        tmp_21_fu_1094_p4;
        sh_assign_1_cast_fu_1058_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1050_p3),32));

    sh_assign_1_fu_1050_p3 <= 
        tmp_2_i_i_cast_fu_1046_p1 when (isNeg_fu_1033_p3(0) = '1') else 
        sh_assign_fu_1027_p2;
    sh_assign_2_fu_1126_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i6_cast1_fu_1123_p1));
        sh_assign_3_cast_fu_1157_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_1149_p3),32));

    sh_assign_3_fu_1149_p3 <= 
        tmp_2_i_i9_cast_fu_1145_p1 when (isNeg_1_fu_1132_p3(0) = '1') else 
        sh_assign_2_fu_1126_p2;
    sh_assign_fu_1027_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast2_fu_1024_p1));

    sum_overP1_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_8_reg_1274, sum_overP1_addr_reg_1324, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_overP1_address0 <= tmp_8_reg_1274(11 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP1_address0 <= sum_overP1_addr_reg_1324;
        else 
            sum_overP1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_overP1_ce0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP1_ce0 <= ap_const_logic_1;
        else 
            sum_overP1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP1_d0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8, tmp_30_fu_861_p2, tmp_32_fu_875_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            sum_overP1_d0 <= tmp_32_fu_875_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP1_d0 <= tmp_30_fu_861_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_overP1_d0 <= ap_const_lv32_0;
        else 
            sum_overP1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_overP1_we0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP1_we0 <= ap_const_logic_1;
        else 
            sum_overP1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP2_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_8_reg_1274, sum_overP2_addr_reg_1329, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_overP2_address0 <= tmp_8_reg_1274(11 - 1 downto 0);
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP2_address0 <= sum_overP2_addr_reg_1329;
        else 
            sum_overP2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_overP2_ce0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, tmp_37_fu_742_p3, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_37_fu_742_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = tmp_37_fu_742_p3))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP2_ce0 <= ap_const_logic_1;
        else 
            sum_overP2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_overP2_d0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_33_fu_881_p2, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8, tmp_31_fu_868_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            sum_overP2_d0 <= tmp_33_fu_881_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_overP2_d0 <= tmp_31_fu_868_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_overP2_d0 <= ap_const_lv32_0;
        else 
            sum_overP2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_overP2_we0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            sum_overP2_we0 <= ap_const_logic_1;
        else 
            sum_overP2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_8_fu_696_p1, sum_pix1_addr_2_reg_1284, ap_sig_cseq_ST_st13_fsm_12, tmp_13_fu_913_p1, tmp_2_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix1_address0 <= sum_pix1_addr_2_reg_1284;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_address0 <= tmp_2_fu_596_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            sum_pix1_address0 <= tmp_13_fu_913_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            sum_pix1_address0 <= tmp_8_fu_696_p1(11 - 1 downto 0);
        else 
            sum_pix1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_pix1_ce0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sum_pix1_ce0 <= ap_const_logic_1;
        else 
            sum_pix1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_d0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, tmp_7_fu_724_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix1_d0 <= tmp_7_fu_724_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_d0 <= ap_const_lv32_0;
        else 
            sum_pix1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix1_we0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_585_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_585_p2)))) then 
            sum_pix1_we0 <= ap_const_logic_1;
        else 
            sum_pix1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_address0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_8_fu_696_p1, sum_pix2_addr_2_reg_1289, ap_sig_cseq_ST_st13_fsm_12, tmp_13_fu_913_p1, tmp_2_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix2_address0 <= sum_pix2_addr_2_reg_1289;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_address0 <= tmp_2_fu_596_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            sum_pix2_address0 <= tmp_13_fu_913_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            sum_pix2_address0 <= tmp_8_fu_696_p1(11 - 1 downto 0);
        else 
            sum_pix2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sum_pix2_ce0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            sum_pix2_ce0 <= ap_const_logic_1;
        else 
            sum_pix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_d0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, tmp_11_fu_735_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix2_d0 <= tmp_11_fu_735_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_d0 <= ap_const_lv32_0;
        else 
            sum_pix2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix2_we0_assign_proc : process(in_stream_TVALID, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_585_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((in_stream_TVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_585_p2)))) then 
            sum_pix2_we0 <= ap_const_logic_1;
        else 
            sum_pix2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_pixP1_fu_953_p3 <= (tmp_14_reg_1409 & ap_const_lv3_0);
    sum_pixP2_fu_960_p3 <= (tmp_15_reg_1414 & ap_const_lv3_0);

    thresh1_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_8_reg_1274, ap_sig_cseq_ST_st8_fsm_7, tmp_13_reg_1388, ap_sig_cseq_ST_st64_fsm_63, tmp_2_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            thresh1_address0 <= tmp_13_reg_1388(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh1_address0 <= tmp_2_fu_596_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            thresh1_address0 <= tmp_8_reg_1274(11 - 1 downto 0);
        else 
            thresh1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    thresh1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            thresh1_ce0 <= ap_const_logic_1;
        else 
            thresh1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, result_V_reg_1483, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            thresh1_d0 <= result_V_reg_1483;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh1_d0 <= ap_const_lv32_FF;
        else 
            thresh1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    thresh1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_585_p2, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_585_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            thresh1_we0 <= ap_const_logic_1;
        else 
            thresh1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh2_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_8_reg_1274, ap_sig_cseq_ST_st10_fsm_9, tmp_13_reg_1388, ap_sig_cseq_ST_st64_fsm_63, tmp_2_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            thresh2_address0 <= tmp_13_reg_1388(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh2_address0 <= tmp_2_fu_596_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            thresh2_address0 <= tmp_8_reg_1274(11 - 1 downto 0);
        else 
            thresh2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    thresh2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            thresh2_ce0 <= ap_const_logic_1;
        else 
            thresh2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    thresh2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, result_V_1_reg_1488, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63)) then 
            thresh2_d0 <= result_V_1_reg_1488;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            thresh2_d0 <= ap_const_lv32_FF;
        else 
            thresh2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    thresh2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond9_fu_585_p2, ap_sig_cseq_ST_st64_fsm_63)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond9_fu_585_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st64_fsm_63))) then 
            thresh2_we0 <= ap_const_logic_1;
        else 
            thresh2_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_840_p1 <= std_logic_vector(resize(signed(tmp_5_reg_1304),17));

        tmp_10_fu_731_p1 <= std_logic_vector(resize(signed(phitmp_fu_710_p4),32));

    tmp_11_fu_735_p2 <= std_logic_vector(unsigned(sum_pix2_q0) + unsigned(tmp_10_fu_731_p1));
        tmp_12_cast_fu_844_p1 <= std_logic_vector(resize(signed(phitmp_reg_1309),17));

    tmp_12_fu_657_p2 <= std_logic_vector(unsigned(tmp_1_reg_1240) + unsigned(i_1_reg_481));
    tmp_13_fu_913_p1 <= std_logic_vector(resize(unsigned(i_3_reg_526),64));
    tmp_17_cast_fu_662_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_657_p2),64));
    tmp_1_fu_640_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_636_p1) + unsigned(p_shl_cast_fu_624_p1));
    tmp_20_fu_1090_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_1082_p3),32));
    tmp_21_fu_1094_p4 <= tmp_7_i_i_fu_1076_p2(83 downto 52);
    tmp_22_fu_1082_p3 <= tmp_5_i_i_fu_1070_p2(52 downto 52);
    tmp_27_fu_1189_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_1181_p3),32));
    tmp_28_fu_792_p2 <= std_logic_vector(unsigned(kk_1_reg_515) + unsigned(ap_const_lv4_1));
    tmp_29_fu_1193_p4 <= tmp_7_i_i1_fu_1175_p2(83 downto 52);
    tmp_2_fu_596_p1 <= std_logic_vector(resize(unsigned(i_reg_459),64));
        tmp_2_i_i9_cast_fu_1145_p1 <= std_logic_vector(resize(signed(tmp_2_i_i9_fu_1140_p2),12));

    tmp_2_i_i9_fu_1140_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_reg_1472));
        tmp_2_i_i_cast_fu_1046_p1 <= std_logic_vector(resize(signed(tmp_2_i_i_fu_1041_p2),12));

    tmp_2_i_i_fu_1041_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_1461));
    tmp_30_fu_861_p2 <= std_logic_vector(unsigned(sum_overP1_q0) + unsigned(extLd_fu_848_p1));
    tmp_31_fu_868_p2 <= std_logic_vector(unsigned(sum_overP2_q0) + unsigned(extLd1_fu_857_p1));
    tmp_32_fu_875_p2 <= std_logic_vector(signed(tmp_6_reg_1314) + signed(sum_overP1_q0));
    tmp_33_fu_881_p2 <= std_logic_vector(signed(tmp_10_reg_1319) + signed(sum_overP2_q0));
    tmp_34_fu_887_p2 <= "1" when (unsigned(tmp_32_fu_875_p2) > unsigned(thresh1_q0)) else "0";
    tmp_35_fu_893_p2 <= "1" when (unsigned(tmp_33_reg_1362) > unsigned(thresh2_q0)) else "0";
    tmp_36_fu_1181_p3 <= tmp_5_i_i1_fu_1169_p2(52 downto 52);
    tmp_37_fu_742_p3 <= kk_1_reg_515(3 downto 3);
    tmp_38_fu_750_p3 <= (kk_1_reg_515 & ap_const_lv10_0);
    tmp_39_fu_762_p3 <= (kk_1_reg_515 & ap_const_lv7_0);
    tmp_3_fu_616_p3 <= (kk_reg_470 & ap_const_lv10_0);
    tmp_40_fu_774_p2 <= std_logic_vector(signed(p_shl5_cast_fu_770_p1) + signed(p_shl4_cast_fu_758_p1));
    tmp_41_fu_780_p2 <= std_logic_vector(unsigned(tmp_40_fu_774_p2) + unsigned(i_2_reg_503));
    tmp_42_fu_798_p3 <= (tmp_28_fu_792_p2 & ap_const_lv10_0);
    tmp_43_fu_810_p3 <= (tmp_28_fu_792_p2 & ap_const_lv7_0);
    tmp_44_fu_822_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_818_p1) + unsigned(p_shl2_cast_fu_806_p1));
    tmp_45_fu_828_p2 <= std_logic_vector(unsigned(tmp_44_fu_822_p2) + unsigned(i_2_reg_503));
    tmp_47_cast_fu_786_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_780_p2),64));
    tmp_4_fu_680_p2 <= std_logic_vector(unsigned(tmp_reg_1219) + unsigned(ap_const_lv16_FFFF));
    tmp_4_i_i1_cast_fu_1165_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1157_p1),53));
    tmp_4_i_i1_fu_1161_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_1157_p1),136));
    tmp_4_i_i_cast_fu_1066_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1058_p1),53));
    tmp_4_i_i_fu_1062_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1058_p1),136));
    tmp_51_cast_fu_852_p1 <= std_logic_vector(resize(unsigned(tmp_45_reg_1347),64));
    tmp_5_fu_706_p1 <= in_stream_TDATA(16 - 1 downto 0);
    tmp_5_i_i1_fu_1169_p2 <= std_logic_vector(shift_right(unsigned(p_Result_4_fu_1112_p3),to_integer(unsigned('0' & tmp_4_i_i1_cast_fu_1165_p1(31-1 downto 0)))));
    tmp_5_i_i_fu_1070_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_1013_p3),to_integer(unsigned('0' & tmp_4_i_i_cast_fu_1066_p1(31-1 downto 0)))));
        tmp_6_fu_720_p1 <= std_logic_vector(resize(signed(tmp_5_fu_706_p1),32));

    tmp_7_fu_724_p2 <= std_logic_vector(unsigned(sum_pix1_q0) + unsigned(tmp_6_fu_720_p1));
    tmp_7_i_i1_fu_1175_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i5_fu_1119_p1),to_integer(unsigned('0' & tmp_4_i_i1_fu_1161_p1(31-1 downto 0)))));
    tmp_7_i_i_fu_1076_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_1020_p1),to_integer(unsigned('0' & tmp_4_i_i_fu_1062_p1(31-1 downto 0)))));
    tmp_8_fu_696_p1 <= std_logic_vector(resize(unsigned(i_2_reg_503),64));
    tmp_9_fu_628_p3 <= (kk_reg_470 & ap_const_lv7_0);
    tmp_fu_581_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_571_p4),16));
    tmp_i_i5_fu_1119_p1 <= std_logic_vector(resize(unsigned(p_Result_4_fu_1112_p3),136));
    tmp_i_i_fu_1020_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_1013_p3),136));
    tmp_i_i_i6_cast1_fu_1123_p1 <= std_logic_vector(resize(unsigned(loc_V_2_reg_1472),12));
    tmp_i_i_i_cast2_fu_1024_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_1461),12));
    tmp_s_fu_571_p4 <= n_pixels_in_bus(15 downto 1);

    trig_data_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_34_reg_1367, tmp_35_fu_893_p2, tmp_35_reg_1376, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (not((ap_const_lv1_0 = tmp_34_reg_1367)) or not((ap_const_lv1_0 = tmp_35_fu_893_p2))))) then 
            trig_data <= ap_const_lv32_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (not((ap_const_lv1_0 = tmp_34_reg_1367)) or not((ap_const_lv1_0 = tmp_35_reg_1376)))))) then 
            trig_data <= ap_const_lv32_0;
        else 
            trig_data <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    trig_data_ap_vld_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_34_reg_1367, tmp_35_fu_893_p2, tmp_35_reg_1376, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (not((ap_const_lv1_0 = tmp_34_reg_1367)) or not((ap_const_lv1_0 = tmp_35_fu_893_p2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (not((ap_const_lv1_0 = tmp_34_reg_1367)) or not((ap_const_lv1_0 = tmp_35_reg_1376)))))) then 
            trig_data_ap_vld <= ap_const_logic_1;
        else 
            trig_data_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
