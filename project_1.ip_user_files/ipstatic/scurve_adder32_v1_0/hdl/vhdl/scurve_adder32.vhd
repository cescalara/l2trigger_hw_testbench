-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scurve_adder32 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of scurve_adder32 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scurve_adder32,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030ffg676-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.530000,HLS_SYN_LAT=99140,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=435,HLS_SYN_LUT=520}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_27 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_58 : BOOLEAN;
    signal exitcond3_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_70 : BOOLEAN;
    signal i_1_fu_312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_115 : BOOLEAN;
    signal j_1_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_124 : BOOLEAN;
    signal exitcond2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_140 : BOOLEAN;
    signal tmp_1_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal phitmp_reg_487 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_pix1_addr_2_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix2_addr_2_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_pix1_load_1_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_159 : BOOLEAN;
    signal sum_pix2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_pix2_load_1_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_512 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_170 : BOOLEAN;
    signal tmp_9_fu_401_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal dub_pix_user_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_1_reg_522 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_181 : BOOLEAN;
    signal dub_pix_id_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_1_reg_527 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_dest_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_1_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal l_1_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_1_reg_540 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_194 : BOOLEAN;
    signal exitcond_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_pix1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_ce0 : STD_LOGIC;
    signal sum_pix1_we0 : STD_LOGIC;
    signal sum_pix1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_pix2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix2_ce0 : STD_LOGIC;
    signal sum_pix2_we0 : STD_LOGIC;
    signal sum_pix2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dub_pix_user_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_user_V_ce0 : STD_LOGIC;
    signal dub_pix_user_V_we0 : STD_LOGIC;
    signal dub_pix_id_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_id_V_ce0 : STD_LOGIC;
    signal dub_pix_id_V_we0 : STD_LOGIC;
    signal dub_pix_dest_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_dest_V_ce0 : STD_LOGIC;
    signal dub_pix_dest_V_we0 : STD_LOGIC;
    signal i_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_273 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_271 : BOOLEAN;
    signal l_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_outStream_TREADY : STD_LOGIC;
    signal tmp_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_outStream_TREADY : STD_LOGIC := '0';
    signal tmp_5_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component scurve_adder32_sum_pix1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component scurve_adder32_dub_pix_user_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component scurve_adder32_dub_pix_id_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component scurve_adder32_dub_pix_dest_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component scurve_adder32_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    scurve_adder32_CTRL_BUS_s_axi_U : component scurve_adder32_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sum_pix1_U : component scurve_adder32_sum_pix1
    generic map (
        DataWidth => 64,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix1_address0,
        ce0 => sum_pix1_ce0,
        we0 => sum_pix1_we0,
        d0 => sum_pix1_d0,
        q0 => sum_pix1_q0);

    sum_pix2_U : component scurve_adder32_sum_pix1
    generic map (
        DataWidth => 64,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix2_address0,
        ce0 => sum_pix2_ce0,
        we0 => sum_pix2_we0,
        d0 => sum_pix2_d0,
        q0 => sum_pix2_q0);

    dub_pix_user_V_U : component scurve_adder32_dub_pix_user_V
    generic map (
        DataWidth => 2,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_user_V_address0,
        ce0 => dub_pix_user_V_ce0,
        we0 => dub_pix_user_V_we0,
        d0 => inStream_TUSER,
        q0 => dub_pix_user_V_q0);

    dub_pix_id_V_U : component scurve_adder32_dub_pix_id_V
    generic map (
        DataWidth => 5,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_id_V_address0,
        ce0 => dub_pix_id_V_ce0,
        we0 => dub_pix_id_V_we0,
        d0 => inStream_TID,
        q0 => dub_pix_id_V_q0);

    dub_pix_dest_V_U : component scurve_adder32_dub_pix_dest_V
    generic map (
        DataWidth => 6,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_dest_V_address0,
        ce0 => dub_pix_dest_V_ce0,
        we0 => dub_pix_dest_V_we0,
        d0 => inStream_TDEST,
        q0 => dub_pix_dest_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_outStream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_logic_1 = outStream_TREADY)))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_262 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_306_p2))) then 
                i_reg_262 <= i_1_fu_312_p2;
            end if; 
        end if;
    end process;

    j_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140) and not((exitcond3_fu_336_p2 = ap_const_lv1_0)))) then 
                j_reg_273 <= j_1_reg_454;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_306_p2)))) then 
                j_reg_273 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    k_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_324_p2))) then 
                k_reg_284 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                k_reg_284 <= k_1_reg_477;
            end if; 
        end if;
    end process;

    l_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                l_reg_295 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))) then 
                l_reg_295 <= l_1_reg_540;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_454 <= j_1_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140))) then
                k_1_reg_477 <= k_1_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                l_1_reg_540 <= l_1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140))) then
                phitmp_reg_487 <= inStream_TDATA(31 downto 16);
                sum_pix1_addr_2_reg_492 <= tmp_8_fu_348_p1(8 - 1 downto 0);
                sum_pix2_addr_2_reg_497 <= tmp_8_fu_348_p1(8 - 1 downto 0);
                tmp_1_reg_482 <= tmp_1_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                sum_pix1_load_1_reg_502 <= sum_pix1_q0;
                sum_pix2_load_1_reg_507 <= sum_pix2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_6_reg_512 <= tmp_6_fu_393_p2;
                tmp_9_reg_517 <= tmp_9_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_dest_V_1_reg_532 <= dub_pix_dest_V_q0;
                tmp_id_V_1_reg_527 <= dub_pix_id_V_q0;
                tmp_user_V_1_reg_522 <= dub_pix_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond_fu_406_p2))) then
                tmp_last_V_reg_555 <= tmp_last_V_fu_424_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_336_p2, exitcond2_fu_324_p2, ap_sig_140, exitcond_fu_406_p2, exitcond1_fu_306_p2, ap_sig_ioackin_outStream_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_306_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_324_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                elsif ((not(ap_sig_140) and not((exitcond3_fu_336_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond_fu_406_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, exitcond_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond_fu_406_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, exitcond_fu_406_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond_fu_406_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_115 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_124_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_124 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_140_assign_proc : process(inStream_TVALID, exitcond3_fu_336_p2)
    begin
                ap_sig_140 <= ((exitcond3_fu_336_p2 = ap_const_lv1_0) and (inStream_TVALID = ap_const_logic_0));
    end process;


    ap_sig_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_159 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_170 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_181_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_181 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_194 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_271_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_271 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_58_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_58 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_70 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_70)
    begin
        if (ap_sig_70) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_27)
    begin
        if (ap_sig_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_115)
    begin
        if (ap_sig_115) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_124)
    begin
        if (ap_sig_124) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_58)
    begin
        if (ap_sig_58) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_159)
    begin
        if (ap_sig_159) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_170)
    begin
        if (ap_sig_170) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_271)
    begin
        if (ap_sig_271) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_181)
    begin
        if (ap_sig_181) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_194)
    begin
        if (ap_sig_194) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_outStream_TREADY_assign_proc : process(outStream_TREADY, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)) then 
            ap_sig_ioackin_outStream_TREADY <= outStream_TREADY;
        else 
            ap_sig_ioackin_outStream_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    dub_pix_dest_V_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, tmp_8_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            dub_pix_dest_V_address0 <= tmp_8_fu_348_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            dub_pix_dest_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_dest_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_dest_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, ap_sig_140)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140)))) then 
            dub_pix_dest_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_dest_V_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_336_p2, ap_sig_140)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140)))) then 
            dub_pix_dest_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_id_V_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, tmp_8_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            dub_pix_id_V_address0 <= tmp_8_fu_348_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            dub_pix_id_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_id_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_id_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, ap_sig_140)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140)))) then 
            dub_pix_id_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_id_V_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_336_p2, ap_sig_140)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140)))) then 
            dub_pix_id_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_user_V_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, tmp_8_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            dub_pix_user_V_address0 <= tmp_8_fu_348_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            dub_pix_user_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_user_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_user_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st3_fsm_2, ap_sig_140)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140)))) then 
            dub_pix_user_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_user_V_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_336_p2, ap_sig_140)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140)))) then 
            dub_pix_user_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_306_p2 <= "1" when (i_reg_262 = ap_const_lv8_C0) else "0";
    exitcond2_fu_324_p2 <= "1" when (j_reg_273 = ap_const_lv8_80) else "0";
    exitcond3_fu_336_p2 <= "1" when (k_reg_284 = ap_const_lv8_C0) else "0";
    exitcond_fu_406_p2 <= "1" when (l_reg_295 = ap_const_lv8_C0) else "0";
    i_1_fu_312_p2 <= std_logic_vector(unsigned(i_reg_262) + unsigned(ap_const_lv8_1));

    inStream_TDATA_blk_n_assign_proc : process(inStream_TVALID, ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_336_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0))) then 
            inStream_TDATA_blk_n <= inStream_TVALID;
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_TREADY_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond3_fu_336_p2, ap_sig_140)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond3_fu_336_p2 = ap_const_lv1_0) and not(ap_sig_140)))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_330_p2 <= std_logic_vector(unsigned(j_reg_273) + unsigned(ap_const_lv8_1));
    k_1_fu_342_p2 <= std_logic_vector(unsigned(k_reg_284) + unsigned(ap_const_lv8_1));
    l_1_fu_412_p2 <= std_logic_vector(unsigned(l_reg_295) + unsigned(ap_const_lv8_1));
    outStream_TDATA <= (sum_pix1_q0 or tmp_3_fu_430_p2);

    outStream_TDATA_blk_n_assign_proc : process(outStream_TREADY, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= tmp_dest_V_1_reg_532;
    outStream_TID <= tmp_id_V_1_reg_527;
    outStream_TKEEP <= ap_const_lv8_FF;
    outStream_TLAST <= tmp_last_V_reg_555;
    outStream_TSTRB <= ap_const_lv8_FF;
    outStream_TUSER <= tmp_user_V_1_reg_522;

    outStream_TVALID_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, sum_pix1_addr_2_reg_492, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6, tmp_fu_318_p1, tmp_8_fu_348_p1, tmp_2_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix1_address0 <= sum_pix1_addr_2_reg_492;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_address0 <= tmp_fu_318_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix1_address0 <= tmp_2_fu_418_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            sum_pix1_address0 <= tmp_8_fu_348_p1(8 - 1 downto 0);
        else 
            sum_pix1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix1_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_140, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            sum_pix1_ce0 <= ap_const_logic_1;
        else 
            sum_pix1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_reg_512, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix1_d0 <= tmp_6_reg_512;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_d0 <= ap_const_lv64_0;
        else 
            sum_pix1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix1_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_306_p2, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_306_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            sum_pix1_we0 <= ap_const_logic_1;
        else 
            sum_pix1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, sum_pix2_addr_2_reg_497, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6, tmp_fu_318_p1, tmp_8_fu_348_p1, tmp_2_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix2_address0 <= sum_pix2_addr_2_reg_497;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_address0 <= tmp_fu_318_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            sum_pix2_address0 <= tmp_2_fu_418_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            sum_pix2_address0 <= tmp_8_fu_348_p1(8 - 1 downto 0);
        else 
            sum_pix2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix2_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_140, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_140)) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            sum_pix2_ce0 <= ap_const_logic_1;
        else 
            sum_pix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_9_reg_517, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sum_pix2_d0 <= tmp_9_reg_517;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_d0 <= ap_const_lv64_0;
        else 
            sum_pix2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_pix2_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_306_p2, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_306_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            sum_pix2_we0 <= ap_const_logic_1;
        else 
            sum_pix2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_376_p1 <= inStream_TDATA(16 - 1 downto 0);
    tmp_2_fu_418_p1 <= std_logic_vector(resize(unsigned(l_reg_295),64));
    tmp_3_fu_430_p2 <= std_logic_vector(shift_left(unsigned(sum_pix2_q0),to_integer(unsigned('0' & ap_const_lv64_20(31-1 downto 0)))));
    tmp_5_fu_390_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_482),64));
    tmp_6_fu_393_p2 <= std_logic_vector(unsigned(tmp_5_fu_390_p1) + unsigned(sum_pix1_load_1_reg_502));
    tmp_7_fu_398_p1 <= std_logic_vector(resize(unsigned(phitmp_reg_487),64));
    tmp_8_fu_348_p1 <= std_logic_vector(resize(unsigned(k_reg_284),64));
    tmp_9_fu_401_p2 <= std_logic_vector(unsigned(tmp_7_fu_398_p1) + unsigned(sum_pix2_load_1_reg_507));
    tmp_fu_318_p1 <= std_logic_vector(resize(unsigned(i_reg_262),64));
    tmp_last_V_fu_424_p2 <= "1" when (l_reg_295 = ap_const_lv8_BF) else "0";
end behav;
