-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scurve_adder is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of scurve_adder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scurve_adder,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.088000,HLS_SYN_LAT=24969,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=301,HLS_SYN_LUT=369}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_pp1_stg0_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st8_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st9_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_pp2_stg0_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st12_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_6000 : STD_LOGIC_VECTOR (14 downto 0) := "110000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp1_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_55 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_pp2_stg0_fsm_5 : STD_LOGIC;
    signal ap_sig_78 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal exitcond_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_295 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal i_1_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_144 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_352_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_mid2_fu_364_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_mid2_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_reg_492 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_497 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_502 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_507_pp1_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_3_reg_507_pp1_iter2 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_phitmp_reg_512_pp1_iter1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_phitmp_reg_512_pp1_iter2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_addr_2_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix2_addr_2_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix1_load_1_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_load_1_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_3 : STD_LOGIC;
    signal ap_sig_209 : BOOLEAN;
    signal dub_pix_user_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_user_V_1_reg_569 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_4 : STD_LOGIC;
    signal ap_sig_222 : BOOLEAN;
    signal dub_pix_id_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_id_V_1_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal dub_pix_dest_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_dest_V_1_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_outStream_TREADY : STD_LOGIC;
    signal l_1_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_pix1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_ce0 : STD_LOGIC;
    signal sum_pix1_we0 : STD_LOGIC;
    signal sum_pix1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix1_ce1 : STD_LOGIC;
    signal sum_pix1_we1 : STD_LOGIC;
    signal sum_pix1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_pix2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix2_ce0 : STD_LOGIC;
    signal sum_pix2_we0 : STD_LOGIC;
    signal sum_pix2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_pix2_ce1 : STD_LOGIC;
    signal sum_pix2_we1 : STD_LOGIC;
    signal sum_pix2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dub_pix_user_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_user_V_ce0 : STD_LOGIC;
    signal dub_pix_user_V_we0 : STD_LOGIC;
    signal dub_pix_id_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_id_V_ce0 : STD_LOGIC;
    signal dub_pix_id_V_we0 : STD_LOGIC;
    signal dub_pix_dest_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dub_pix_dest_V_ce0 : STD_LOGIC;
    signal dub_pix_dest_V_we0 : STD_LOGIC;
    signal i_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_outStream_TREADY : STD_LOGIC := '0';
    signal exitcond2_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_6 : STD_LOGIC;
    signal ap_sig_476 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component scurve_adder_sum_pix1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scurve_adder_dub_pix_user_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component scurve_adder_dub_pix_id_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component scurve_adder_dub_pix_dest_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component scurve_adder_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    scurve_adder_CTRL_BUS_s_axi_U : component scurve_adder_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sum_pix1_U : component scurve_adder_sum_pix1
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix1_address0,
        ce0 => sum_pix1_ce0,
        we0 => sum_pix1_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix1_q0,
        address1 => sum_pix1_address1,
        ce1 => sum_pix1_ce1,
        we1 => sum_pix1_we1,
        d1 => tmp_6_reg_544,
        q1 => sum_pix1_q1);

    sum_pix2_U : component scurve_adder_sum_pix1
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sum_pix2_address0,
        ce0 => sum_pix2_ce0,
        we0 => sum_pix2_we0,
        d0 => ap_const_lv32_0,
        q0 => sum_pix2_q0,
        address1 => sum_pix2_address1,
        ce1 => sum_pix2_ce1,
        we1 => sum_pix2_we1,
        d1 => tmp_9_reg_549,
        q1 => sum_pix2_q1);

    dub_pix_user_V_U : component scurve_adder_dub_pix_user_V
    generic map (
        DataWidth => 2,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_user_V_address0,
        ce0 => dub_pix_user_V_ce0,
        we0 => dub_pix_user_V_we0,
        d0 => tmp_user_V_reg_492,
        q0 => dub_pix_user_V_q0);

    dub_pix_id_V_U : component scurve_adder_dub_pix_id_V
    generic map (
        DataWidth => 5,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_id_V_address0,
        ce0 => dub_pix_id_V_ce0,
        we0 => dub_pix_id_V_we0,
        d0 => tmp_id_V_reg_497,
        q0 => dub_pix_id_V_q0);

    dub_pix_dest_V_U : component scurve_adder_dub_pix_dest_V
    generic map (
        DataWidth => 6,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dub_pix_dest_V_address0,
        ce0 => dub_pix_dest_V_ce0,
        we0 => dub_pix_dest_V_we0,
        d0 => tmp_dest_V_reg_502,
        q0 => dub_pix_dest_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_outStream_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_1 = outStream_TREADY)))) then 
                    ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((exitcond_flatten_fu_346_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_328_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((exitcond_flatten_fu_346_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))) then 
                    ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
                    ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_432_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_4)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and (ap_const_lv1_0 = exitcond_fu_432_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_432_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_284 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_328_p2))) then 
                i_reg_284 <= i_1_fu_334_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
                indvar_flatten_reg_295 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)))) then 
                indvar_flatten_reg_295 <= indvar_flatten_next_fu_352_p2;
            end if; 
        end if;
    end process;

    k_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
                k_reg_306 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)))) then 
                k_reg_306 <= k_1_fu_402_p2;
            end if; 
        end if;
    end process;

    l_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_4)) then 
                l_reg_317 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and (ap_const_lv1_0 = exitcond_fu_432_p2))) then 
                l_reg_317 <= l_1_fu_438_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)))) then
                ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter1 <= exitcond_flatten_reg_478;
                ap_reg_ppstg_phitmp_reg_512_pp1_iter1 <= phitmp_reg_512;
                ap_reg_ppstg_tmp_3_reg_507_pp1_iter1 <= tmp_3_reg_507;
                exitcond_flatten_reg_478 <= exitcond_flatten_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))) then
                ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter1;
                ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter2;
                ap_reg_ppstg_phitmp_reg_512_pp1_iter2 <= ap_reg_ppstg_phitmp_reg_512_pp1_iter1;
                ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter2 <= sum_pix1_addr_2_reg_522;
                ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter3 <= ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter2;
                ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter2 <= sum_pix2_addr_2_reg_528;
                ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter3 <= ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter2;
                ap_reg_ppstg_tmp_3_reg_507_pp1_iter2 <= ap_reg_ppstg_tmp_3_reg_507_pp1_iter1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))))) then
                exitcond_reg_584 <= exitcond_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)))) then
                k_mid2_reg_487 <= k_mid2_fu_364_p3;
                phitmp_reg_512 <= inStream_TDATA(15 downto 8);
                tmp_3_reg_507 <= tmp_3_fu_388_p1;
                tmp_dest_V_reg_502 <= inStream_TDEST;
                tmp_id_V_reg_497 <= inStream_TID;
                tmp_user_V_reg_492 <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = exitcond_flatten_reg_478))) then
                sum_pix1_addr_2_reg_522 <= tmp_8_fu_408_p1(8 - 1 downto 0);
                sum_pix2_addr_2_reg_528 <= tmp_8_fu_408_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter1))) then
                sum_pix1_load_1_reg_534 <= sum_pix1_q0;
                sum_pix2_load_1_reg_539 <= sum_pix2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter2))) then
                tmp_6_reg_544 <= tmp_6_fu_419_p2;
                tmp_9_reg_549 <= tmp_9_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_4)) then
                tmp_dest_V_1_reg_579 <= dub_pix_dest_V_q0;
                tmp_id_V_1_reg_574 <= dub_pix_id_V_q0;
                tmp_user_V_1_reg_569 <= dub_pix_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and (ap_const_lv1_0 = exitcond_fu_432_p2))) then
                tmp_last_V_reg_603 <= tmp_last_V_fu_450_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it3, ap_reg_ppiten_pp1_it4, exitcond_flatten_fu_346_p2, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, exitcond_reg_584, exitcond1_fu_328_p2, ap_sig_144, exitcond_fu_432_p2, ap_sig_ioackin_outStream_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond1_fu_328_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                end if;
            when ap_ST_pp1_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((exitcond_flatten_fu_346_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it3))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and not((exitcond_flatten_fu_346_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                end if;
            when ap_ST_st8_fsm_3 => 
                ap_NS_fsm <= ap_ST_st9_fsm_4;
            when ap_ST_st9_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_5;
            when ap_ST_pp2_stg0_fsm_5 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_432_p2))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY))) and not((ap_const_lv1_0 = exitcond_fu_432_p2)))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_5;
                end if;
            when ap_ST_st12_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st12_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_144_assign_proc : process(inStream_TVALID, exitcond_flatten_fu_346_p2)
    begin
                ap_sig_144 <= ((exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and (inStream_TVALID = ap_const_logic_0));
    end process;


    ap_sig_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_209 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_222 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_476_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_476 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_55 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_78 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_pp1_stg0_fsm_2_assign_proc : process(ap_sig_55)
    begin
        if (ap_sig_55) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp2_stg0_fsm_5_assign_proc : process(ap_sig_78)
    begin
        if (ap_sig_78) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_6_assign_proc : process(ap_sig_476)
    begin
        if (ap_sig_476) then 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_3_assign_proc : process(ap_sig_209)
    begin
        if (ap_sig_209) then 
            ap_sig_cseq_ST_st8_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_4_assign_proc : process(ap_sig_222)
    begin
        if (ap_sig_222) then 
            ap_sig_cseq_ST_st9_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_outStream_TREADY_assign_proc : process(outStream_TREADY, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)) then 
            ap_sig_ioackin_outStream_TREADY <= outStream_TREADY;
        else 
            ap_sig_ioackin_outStream_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    dub_pix_dest_V_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st8_fsm_3, tmp_8_fu_408_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            dub_pix_dest_V_address0 <= tmp_8_fu_408_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3)) then 
            dub_pix_dest_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_dest_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_dest_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_144, ap_sig_cseq_ST_st8_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            dub_pix_dest_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_dest_V_we0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, exitcond_flatten_reg_478, ap_sig_144)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = exitcond_flatten_reg_478)))) then 
            dub_pix_dest_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_id_V_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st8_fsm_3, tmp_8_fu_408_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            dub_pix_id_V_address0 <= tmp_8_fu_408_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3)) then 
            dub_pix_id_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_id_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_id_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_144, ap_sig_cseq_ST_st8_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            dub_pix_id_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_id_V_we0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, exitcond_flatten_reg_478, ap_sig_144)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = exitcond_flatten_reg_478)))) then 
            dub_pix_id_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_user_V_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st8_fsm_3, tmp_8_fu_408_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            dub_pix_user_V_address0 <= tmp_8_fu_408_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3)) then 
            dub_pix_user_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            dub_pix_user_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dub_pix_user_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_144, ap_sig_cseq_ST_st8_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            dub_pix_user_V_ce0 <= ap_const_logic_1;
        else 
            dub_pix_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dub_pix_user_V_we0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, exitcond_flatten_reg_478, ap_sig_144)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = exitcond_flatten_reg_478)))) then 
            dub_pix_user_V_we0 <= ap_const_logic_1;
        else 
            dub_pix_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_328_p2 <= "1" when (i_reg_284 = ap_const_lv8_C0) else "0";
    exitcond2_fu_358_p2 <= "1" when (k_reg_306 = ap_const_lv8_C0) else "0";
    exitcond_flatten_fu_346_p2 <= "1" when (indvar_flatten_reg_295 = ap_const_lv15_6000) else "0";
    exitcond_fu_432_p2 <= "1" when (l_reg_317 = ap_const_lv8_C0) else "0";
    i_1_fu_334_p2 <= std_logic_vector(unsigned(i_reg_284) + unsigned(ap_const_lv8_1));

    inStream_TDATA_blk_n_assign_proc : process(inStream_TVALID, ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, exitcond_flatten_fu_346_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0))) then 
            inStream_TDATA_blk_n <= inStream_TVALID;
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_TREADY_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, exitcond_flatten_fu_346_p2, ap_sig_144)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond_flatten_fu_346_p2 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_352_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_295) + unsigned(ap_const_lv15_1));
    k_1_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(k_mid2_fu_364_p3));
    k_mid2_fu_364_p3 <= 
        ap_const_lv8_0 when (exitcond2_fu_358_p2(0) = '1') else 
        k_reg_306;
    l_1_fu_438_p2 <= std_logic_vector(unsigned(l_reg_317) + unsigned(ap_const_lv8_1));
    outStream_TDATA <= (sum_pix1_q1 or tmp_10_fu_456_p2);

    outStream_TDATA_blk_n_assign_proc : process(outStream_TREADY, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it1, exitcond_reg_584)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584))) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= tmp_dest_V_1_reg_579;
    outStream_TID <= tmp_id_V_1_reg_574;
    outStream_TKEEP <= ap_const_lv4_F;
    outStream_TLAST <= tmp_last_V_reg_603;
    outStream_TSTRB <= ap_const_lv4_F;
    outStream_TUSER <= tmp_user_V_1_reg_569;

    outStream_TVALID_assign_proc : process(ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it1, exitcond_reg_584, ap_reg_ioackin_outStream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_reg_ioackin_outStream_TREADY)))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_340_p1, tmp_8_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix1_address0 <= tmp_fu_340_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            sum_pix1_address0 <= tmp_8_fu_408_p1(8 - 1 downto 0);
        else 
            sum_pix1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix1_address1_assign_proc : process(ap_reg_ppiten_pp1_it4, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter3, tmp_2_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4)) then 
            sum_pix1_address1 <= ap_reg_ppstg_sum_pix1_addr_2_reg_522_pp1_iter3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            sum_pix1_address1 <= tmp_2_fu_444_p1(8 - 1 downto 0);
        else 
            sum_pix1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix1_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st2_fsm_1, ap_sig_144)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            sum_pix1_ce0 <= ap_const_logic_1;
        else 
            sum_pix1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_ce1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it4, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, exitcond_reg_584, ap_sig_144, ap_sig_ioackin_outStream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            sum_pix1_ce1 <= ap_const_logic_1;
        else 
            sum_pix1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_we0_assign_proc : process(exitcond1_fu_328_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
            sum_pix1_we0 <= ap_const_logic_1;
        else 
            sum_pix1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix1_we1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it4, ap_sig_144, ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3)))) then 
            sum_pix1_we1 <= ap_const_logic_1;
        else 
            sum_pix1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_address0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st2_fsm_1, tmp_fu_340_p1, tmp_8_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            sum_pix2_address0 <= tmp_fu_340_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            sum_pix2_address0 <= tmp_8_fu_408_p1(8 - 1 downto 0);
        else 
            sum_pix2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix2_address1_assign_proc : process(ap_reg_ppiten_pp1_it4, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter3, tmp_2_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4)) then 
            sum_pix2_address1 <= ap_reg_ppstg_sum_pix2_addr_2_reg_528_pp1_iter3;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            sum_pix2_address1 <= tmp_2_fu_444_p1(8 - 1 downto 0);
        else 
            sum_pix2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    sum_pix2_ce0_assign_proc : process(ap_sig_cseq_ST_pp1_stg0_fsm_2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_st2_fsm_1, ap_sig_144)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            sum_pix2_ce0 <= ap_const_logic_1;
        else 
            sum_pix2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_ce1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it4, ap_sig_cseq_ST_pp2_stg0_fsm_5, ap_reg_ppiten_pp2_it1, ap_reg_ppiten_pp2_it0, exitcond_reg_584, ap_sig_144, ap_sig_ioackin_outStream_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_reg_584) and (ap_const_logic_0 = ap_sig_ioackin_outStream_TREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144))))) then 
            sum_pix2_ce1 <= ap_const_logic_1;
        else 
            sum_pix2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_we0_assign_proc : process(exitcond1_fu_328_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond1_fu_328_p2)))) then 
            sum_pix2_we0 <= ap_const_logic_1;
        else 
            sum_pix2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_pix2_we1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it4, ap_sig_144, ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and ap_sig_144)) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_478_pp1_iter3)))) then 
            sum_pix2_we1 <= ap_const_logic_1;
        else 
            sum_pix2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_456_p2 <= std_logic_vector(shift_left(unsigned(sum_pix2_q1),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    tmp_2_fu_444_p1 <= std_logic_vector(resize(unsigned(l_reg_317),64));
    tmp_3_fu_388_p1 <= inStream_TDATA(8 - 1 downto 0);
    tmp_5_fu_416_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_3_reg_507_pp1_iter2),32));
    tmp_6_fu_419_p2 <= std_logic_vector(unsigned(tmp_5_fu_416_p1) + unsigned(sum_pix1_load_1_reg_534));
    tmp_7_fu_424_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_phitmp_reg_512_pp1_iter2),32));
    tmp_8_fu_408_p1 <= std_logic_vector(resize(unsigned(k_mid2_reg_487),64));
    tmp_9_fu_427_p2 <= std_logic_vector(unsigned(tmp_7_fu_424_p1) + unsigned(sum_pix2_load_1_reg_539));
    tmp_fu_340_p1 <= std_logic_vector(resize(unsigned(i_reg_284),64));
    tmp_last_V_fu_450_p2 <= "1" when (l_reg_317 = ap_const_lv8_BF) else "0";
end behav;
